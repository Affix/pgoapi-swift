// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Inventory.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public func == (lhs: Pogoprotos.Inventory.AppliedItem, rhs: Pogoprotos.Inventory.AppliedItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasItemType == rhs.hasItemType) && (!lhs.hasItemType || lhs.itemType == rhs.itemType)
  fieldCheck = fieldCheck && (lhs.hasExpireMs == rhs.hasExpireMs) && (!lhs.hasExpireMs || lhs.expireMs == rhs.expireMs)
  fieldCheck = fieldCheck && (lhs.hasAppliedMs == rhs.hasAppliedMs) && (!lhs.hasAppliedMs || lhs.appliedMs == rhs.appliedMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.AppliedItems, rhs: Pogoprotos.Inventory.AppliedItems) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.item == rhs.item)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.EggIncubator, rhs: Pogoprotos.Inventory.EggIncubator) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasIncubatorType == rhs.hasIncubatorType) && (!lhs.hasIncubatorType || lhs.incubatorType == rhs.incubatorType)
  fieldCheck = fieldCheck && (lhs.hasUsesRemaining == rhs.hasUsesRemaining) && (!lhs.hasUsesRemaining || lhs.usesRemaining == rhs.usesRemaining)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasStartKmWalked == rhs.hasStartKmWalked) && (!lhs.hasStartKmWalked || lhs.startKmWalked == rhs.startKmWalked)
  fieldCheck = fieldCheck && (lhs.hasTargetKmWalked == rhs.hasTargetKmWalked) && (!lhs.hasTargetKmWalked || lhs.targetKmWalked == rhs.targetKmWalked)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.EggIncubators, rhs: Pogoprotos.Inventory.EggIncubators) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEggIncubator == rhs.hasEggIncubator) && (!lhs.hasEggIncubator || lhs.eggIncubator == rhs.eggIncubator)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.InventoryDelta, rhs: Pogoprotos.Inventory.InventoryDelta) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOriginalTimestampMs == rhs.hasOriginalTimestampMs) && (!lhs.hasOriginalTimestampMs || lhs.originalTimestampMs == rhs.originalTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasNewTimestampMs == rhs.hasNewTimestampMs) && (!lhs.hasNewTimestampMs || lhs.newTimestampMs == rhs.newTimestampMs)
  fieldCheck = fieldCheck && (lhs.inventoryItems == rhs.inventoryItems)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.InventoryItem, rhs: Pogoprotos.Inventory.InventoryItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasModifiedTimestampMs == rhs.hasModifiedTimestampMs) && (!lhs.hasModifiedTimestampMs || lhs.modifiedTimestampMs == rhs.modifiedTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasDeletedItemKey == rhs.hasDeletedItemKey) && (!lhs.hasDeletedItemKey || lhs.deletedItemKey == rhs.deletedItemKey)
  fieldCheck = fieldCheck && (lhs.hasInventoryItemData == rhs.hasInventoryItemData) && (!lhs.hasInventoryItemData || lhs.inventoryItemData == rhs.inventoryItemData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.InventoryItemData, rhs: Pogoprotos.Inventory.InventoryItemData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonData == rhs.hasPokemonData) && (!lhs.hasPokemonData || lhs.pokemonData == rhs.pokemonData)
  fieldCheck = fieldCheck && (lhs.hasItem == rhs.hasItem) && (!lhs.hasItem || lhs.item == rhs.item)
  fieldCheck = fieldCheck && (lhs.hasPokedexEntry == rhs.hasPokedexEntry) && (!lhs.hasPokedexEntry || lhs.pokedexEntry == rhs.pokedexEntry)
  fieldCheck = fieldCheck && (lhs.hasPlayerStats == rhs.hasPlayerStats) && (!lhs.hasPlayerStats || lhs.playerStats == rhs.playerStats)
  fieldCheck = fieldCheck && (lhs.hasPlayerCurrency == rhs.hasPlayerCurrency) && (!lhs.hasPlayerCurrency || lhs.playerCurrency == rhs.playerCurrency)
  fieldCheck = fieldCheck && (lhs.hasPlayerCamera == rhs.hasPlayerCamera) && (!lhs.hasPlayerCamera || lhs.playerCamera == rhs.playerCamera)
  fieldCheck = fieldCheck && (lhs.hasInventoryUpgrades == rhs.hasInventoryUpgrades) && (!lhs.hasInventoryUpgrades || lhs.inventoryUpgrades == rhs.inventoryUpgrades)
  fieldCheck = fieldCheck && (lhs.hasAppliedItems == rhs.hasAppliedItems) && (!lhs.hasAppliedItems || lhs.appliedItems == rhs.appliedItems)
  fieldCheck = fieldCheck && (lhs.hasEggIncubators == rhs.hasEggIncubators) && (!lhs.hasEggIncubators || lhs.eggIncubators == rhs.eggIncubators)
  fieldCheck = fieldCheck && (lhs.hasPokemonFamily == rhs.hasPokemonFamily) && (!lhs.hasPokemonFamily || lhs.pokemonFamily == rhs.pokemonFamily)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.InventoryUpgrade, rhs: Pogoprotos.Inventory.InventoryUpgrade) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasUpgradeType == rhs.hasUpgradeType) && (!lhs.hasUpgradeType || lhs.upgradeType == rhs.upgradeType)
  fieldCheck = fieldCheck && (lhs.hasAdditionalStorage == rhs.hasAdditionalStorage) && (!lhs.hasAdditionalStorage || lhs.additionalStorage == rhs.additionalStorage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.InventoryUpgrades, rhs: Pogoprotos.Inventory.InventoryUpgrades) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.inventoryUpgrades == rhs.inventoryUpgrades)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.Item, rhs: Pogoprotos.Inventory.Item) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasCount == rhs.hasCount) && (!lhs.hasCount || lhs.count == rhs.count)
  fieldCheck = fieldCheck && (lhs.hasUnseen == rhs.hasUnseen) && (!lhs.hasUnseen || lhs.unseen == rhs.unseen)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.ItemAward, rhs: Pogoprotos.Inventory.ItemAward) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasItemCount == rhs.hasItemCount) && (!lhs.hasItemCount || lhs.itemCount == rhs.itemCount)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Inventory.PokemonFamily, rhs: Pogoprotos.Inventory.PokemonFamily) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFamilyId == rhs.hasFamilyId) && (!lhs.hasFamilyId || lhs.familyId == rhs.familyId)
  fieldCheck = fieldCheck && (lhs.hasCandy == rhs.hasCandy) && (!lhs.hasCandy || lhs.candy == rhs.candy)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Inventory {
  public struct PogoprotosInventoryRoot {
    public static var sharedInstance : PogoprotosInventoryRoot {
     struct Static {
         static let instance : PogoprotosInventoryRoot = PogoprotosInventoryRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum EggIncubatorType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case IncubatorUnset = 0
    case IncubatorDistance = 1
    public func toString() -> String {
      switch self {
      case .IncubatorUnset: return "INCUBATOR_UNSET"
      case .IncubatorDistance: return "INCUBATOR_DISTANCE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Inventory.EggIncubatorType {
      switch str {
      case "INCUBATOR_UNSET":  return .IncubatorUnset
      case "INCUBATOR_DISTANCE":  return .IncubatorDistance
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .IncubatorUnset: return ".IncubatorUnset"
            case .IncubatorDistance: return ".IncubatorDistance"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum InventoryUpgradeType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case UpgradeUnset = 0
    case IncreaseItemStorage = 1
    case IncreasePokemonStorage = 2
    public func toString() -> String {
      switch self {
      case .UpgradeUnset: return "UPGRADE_UNSET"
      case .IncreaseItemStorage: return "INCREASE_ITEM_STORAGE"
      case .IncreasePokemonStorage: return "INCREASE_POKEMON_STORAGE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Inventory.InventoryUpgradeType {
      switch str {
      case "UPGRADE_UNSET":  return .UpgradeUnset
      case "INCREASE_ITEM_STORAGE":  return .IncreaseItemStorage
      case "INCREASE_POKEMON_STORAGE":  return .IncreasePokemonStorage
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .UpgradeUnset: return ".UpgradeUnset"
            case .IncreaseItemStorage: return ".IncreaseItemStorage"
            case .IncreasePokemonStorage: return ".IncreasePokemonStorage"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ItemUnknown = 0
    case ItemPokeBall = 1
    case ItemGreatBall = 2
    case ItemUltraBall = 3
    case ItemMasterBall = 4
    case ItemPotion = 101
    case ItemSuperPotion = 102
    case ItemHyperPotion = 103
    case ItemMaxPotion = 104
    case ItemRevive = 201
    case ItemMaxRevive = 202
    case ItemLuckyEgg = 301
    case ItemIncenseOrdinary = 401
    case ItemIncenseSpicy = 402
    case ItemIncenseCool = 403
    case ItemIncenseFloral = 404
    case ItemTroyDisk = 501
    case ItemXAttack = 602
    case ItemXDefense = 603
    case ItemXMiracle = 604
    case ItemRazzBerry = 701
    case ItemBlukBerry = 702
    case ItemNanabBerry = 703
    case ItemWeparBerry = 704
    case ItemPinapBerry = 705
    case ItemSpecialCamera = 801
    case ItemIncubatorBasicUnlimited = 901
    case ItemIncubatorBasic = 902
    case ItemPokemonStorageUpgrade = 1001
    case ItemItemStorageUpgrade = 1002
    public func toString() -> String {
      switch self {
      case .ItemUnknown: return "ITEM_UNKNOWN"
      case .ItemPokeBall: return "ITEM_POKE_BALL"
      case .ItemGreatBall: return "ITEM_GREAT_BALL"
      case .ItemUltraBall: return "ITEM_ULTRA_BALL"
      case .ItemMasterBall: return "ITEM_MASTER_BALL"
      case .ItemPotion: return "ITEM_POTION"
      case .ItemSuperPotion: return "ITEM_SUPER_POTION"
      case .ItemHyperPotion: return "ITEM_HYPER_POTION"
      case .ItemMaxPotion: return "ITEM_MAX_POTION"
      case .ItemRevive: return "ITEM_REVIVE"
      case .ItemMaxRevive: return "ITEM_MAX_REVIVE"
      case .ItemLuckyEgg: return "ITEM_LUCKY_EGG"
      case .ItemIncenseOrdinary: return "ITEM_INCENSE_ORDINARY"
      case .ItemIncenseSpicy: return "ITEM_INCENSE_SPICY"
      case .ItemIncenseCool: return "ITEM_INCENSE_COOL"
      case .ItemIncenseFloral: return "ITEM_INCENSE_FLORAL"
      case .ItemTroyDisk: return "ITEM_TROY_DISK"
      case .ItemXAttack: return "ITEM_X_ATTACK"
      case .ItemXDefense: return "ITEM_X_DEFENSE"
      case .ItemXMiracle: return "ITEM_X_MIRACLE"
      case .ItemRazzBerry: return "ITEM_RAZZ_BERRY"
      case .ItemBlukBerry: return "ITEM_BLUK_BERRY"
      case .ItemNanabBerry: return "ITEM_NANAB_BERRY"
      case .ItemWeparBerry: return "ITEM_WEPAR_BERRY"
      case .ItemPinapBerry: return "ITEM_PINAP_BERRY"
      case .ItemSpecialCamera: return "ITEM_SPECIAL_CAMERA"
      case .ItemIncubatorBasicUnlimited: return "ITEM_INCUBATOR_BASIC_UNLIMITED"
      case .ItemIncubatorBasic: return "ITEM_INCUBATOR_BASIC"
      case .ItemPokemonStorageUpgrade: return "ITEM_POKEMON_STORAGE_UPGRADE"
      case .ItemItemStorageUpgrade: return "ITEM_ITEM_STORAGE_UPGRADE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Inventory.ItemId {
      switch str {
      case "ITEM_UNKNOWN":  return .ItemUnknown
      case "ITEM_POKE_BALL":  return .ItemPokeBall
      case "ITEM_GREAT_BALL":  return .ItemGreatBall
      case "ITEM_ULTRA_BALL":  return .ItemUltraBall
      case "ITEM_MASTER_BALL":  return .ItemMasterBall
      case "ITEM_POTION":  return .ItemPotion
      case "ITEM_SUPER_POTION":  return .ItemSuperPotion
      case "ITEM_HYPER_POTION":  return .ItemHyperPotion
      case "ITEM_MAX_POTION":  return .ItemMaxPotion
      case "ITEM_REVIVE":  return .ItemRevive
      case "ITEM_MAX_REVIVE":  return .ItemMaxRevive
      case "ITEM_LUCKY_EGG":  return .ItemLuckyEgg
      case "ITEM_INCENSE_ORDINARY":  return .ItemIncenseOrdinary
      case "ITEM_INCENSE_SPICY":  return .ItemIncenseSpicy
      case "ITEM_INCENSE_COOL":  return .ItemIncenseCool
      case "ITEM_INCENSE_FLORAL":  return .ItemIncenseFloral
      case "ITEM_TROY_DISK":  return .ItemTroyDisk
      case "ITEM_X_ATTACK":  return .ItemXAttack
      case "ITEM_X_DEFENSE":  return .ItemXDefense
      case "ITEM_X_MIRACLE":  return .ItemXMiracle
      case "ITEM_RAZZ_BERRY":  return .ItemRazzBerry
      case "ITEM_BLUK_BERRY":  return .ItemBlukBerry
      case "ITEM_NANAB_BERRY":  return .ItemNanabBerry
      case "ITEM_WEPAR_BERRY":  return .ItemWeparBerry
      case "ITEM_PINAP_BERRY":  return .ItemPinapBerry
      case "ITEM_SPECIAL_CAMERA":  return .ItemSpecialCamera
      case "ITEM_INCUBATOR_BASIC_UNLIMITED":  return .ItemIncubatorBasicUnlimited
      case "ITEM_INCUBATOR_BASIC":  return .ItemIncubatorBasic
      case "ITEM_POKEMON_STORAGE_UPGRADE":  return .ItemPokemonStorageUpgrade
      case "ITEM_ITEM_STORAGE_UPGRADE":  return .ItemItemStorageUpgrade
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ItemUnknown: return ".ItemUnknown"
            case .ItemPokeBall: return ".ItemPokeBall"
            case .ItemGreatBall: return ".ItemGreatBall"
            case .ItemUltraBall: return ".ItemUltraBall"
            case .ItemMasterBall: return ".ItemMasterBall"
            case .ItemPotion: return ".ItemPotion"
            case .ItemSuperPotion: return ".ItemSuperPotion"
            case .ItemHyperPotion: return ".ItemHyperPotion"
            case .ItemMaxPotion: return ".ItemMaxPotion"
            case .ItemRevive: return ".ItemRevive"
            case .ItemMaxRevive: return ".ItemMaxRevive"
            case .ItemLuckyEgg: return ".ItemLuckyEgg"
            case .ItemIncenseOrdinary: return ".ItemIncenseOrdinary"
            case .ItemIncenseSpicy: return ".ItemIncenseSpicy"
            case .ItemIncenseCool: return ".ItemIncenseCool"
            case .ItemIncenseFloral: return ".ItemIncenseFloral"
            case .ItemTroyDisk: return ".ItemTroyDisk"
            case .ItemXAttack: return ".ItemXAttack"
            case .ItemXDefense: return ".ItemXDefense"
            case .ItemXMiracle: return ".ItemXMiracle"
            case .ItemRazzBerry: return ".ItemRazzBerry"
            case .ItemBlukBerry: return ".ItemBlukBerry"
            case .ItemNanabBerry: return ".ItemNanabBerry"
            case .ItemWeparBerry: return ".ItemWeparBerry"
            case .ItemPinapBerry: return ".ItemPinapBerry"
            case .ItemSpecialCamera: return ".ItemSpecialCamera"
            case .ItemIncubatorBasicUnlimited: return ".ItemIncubatorBasicUnlimited"
            case .ItemIncubatorBasic: return ".ItemIncubatorBasic"
            case .ItemPokemonStorageUpgrade: return ".ItemPokemonStorageUpgrade"
            case .ItemItemStorageUpgrade: return ".ItemItemStorageUpgrade"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ItemTypeNone = 0
    case ItemTypePokeball = 1
    case ItemTypePotion = 2
    case ItemTypeRevive = 3
    case ItemTypeMap = 4
    case ItemTypeBattle = 5
    case ItemTypeFood = 6
    case ItemTypeCamera = 7
    case ItemTypeDisk = 8
    case ItemTypeIncubator = 9
    case ItemTypeIncense = 10
    case ItemTypeXpBoost = 11
    case ItemTypeInventoryUpgrade = 12
    public func toString() -> String {
      switch self {
      case .ItemTypeNone: return "ITEM_TYPE_NONE"
      case .ItemTypePokeball: return "ITEM_TYPE_POKEBALL"
      case .ItemTypePotion: return "ITEM_TYPE_POTION"
      case .ItemTypeRevive: return "ITEM_TYPE_REVIVE"
      case .ItemTypeMap: return "ITEM_TYPE_MAP"
      case .ItemTypeBattle: return "ITEM_TYPE_BATTLE"
      case .ItemTypeFood: return "ITEM_TYPE_FOOD"
      case .ItemTypeCamera: return "ITEM_TYPE_CAMERA"
      case .ItemTypeDisk: return "ITEM_TYPE_DISK"
      case .ItemTypeIncubator: return "ITEM_TYPE_INCUBATOR"
      case .ItemTypeIncense: return "ITEM_TYPE_INCENSE"
      case .ItemTypeXpBoost: return "ITEM_TYPE_XP_BOOST"
      case .ItemTypeInventoryUpgrade: return "ITEM_TYPE_INVENTORY_UPGRADE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Inventory.ItemType {
      switch str {
      case "ITEM_TYPE_NONE":  return .ItemTypeNone
      case "ITEM_TYPE_POKEBALL":  return .ItemTypePokeball
      case "ITEM_TYPE_POTION":  return .ItemTypePotion
      case "ITEM_TYPE_REVIVE":  return .ItemTypeRevive
      case "ITEM_TYPE_MAP":  return .ItemTypeMap
      case "ITEM_TYPE_BATTLE":  return .ItemTypeBattle
      case "ITEM_TYPE_FOOD":  return .ItemTypeFood
      case "ITEM_TYPE_CAMERA":  return .ItemTypeCamera
      case "ITEM_TYPE_DISK":  return .ItemTypeDisk
      case "ITEM_TYPE_INCUBATOR":  return .ItemTypeIncubator
      case "ITEM_TYPE_INCENSE":  return .ItemTypeIncense
      case "ITEM_TYPE_XP_BOOST":  return .ItemTypeXpBoost
      case "ITEM_TYPE_INVENTORY_UPGRADE":  return .ItemTypeInventoryUpgrade
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ItemTypeNone: return ".ItemTypeNone"
            case .ItemTypePokeball: return ".ItemTypePokeball"
            case .ItemTypePotion: return ".ItemTypePotion"
            case .ItemTypeRevive: return ".ItemTypeRevive"
            case .ItemTypeMap: return ".ItemTypeMap"
            case .ItemTypeBattle: return ".ItemTypeBattle"
            case .ItemTypeFood: return ".ItemTypeFood"
            case .ItemTypeCamera: return ".ItemTypeCamera"
            case .ItemTypeDisk: return ".ItemTypeDisk"
            case .ItemTypeIncubator: return ".ItemTypeIncubator"
            case .ItemTypeIncense: return ".ItemTypeIncense"
            case .ItemTypeXpBoost: return ".ItemTypeXpBoost"
            case .ItemTypeInventoryUpgrade: return ".ItemTypeInventoryUpgrade"
        }
    }
  }

  //Enum type declaration end 

  final public class AppliedItem : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.ItemId = Pogoprotos.Inventory.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var itemType:Pogoprotos.Inventory.ItemType = Pogoprotos.Inventory.ItemType.ItemTypeNone
    public private(set) var hasItemType:Bool = false
    public private(set) var hasExpireMs:Bool = false
    public private(set) var expireMs:Int64 = Int64(0)

    public private(set) var hasAppliedMs:Bool = false
    public private(set) var appliedMs:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasItemType {
        try output.writeEnum(2, value:itemType.rawValue)
      }
      if hasExpireMs {
        try output.writeInt64(3, value:expireMs)
      }
      if hasAppliedMs {
        try output.writeInt64(4, value:appliedMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if (hasItemType) {
        serialize_size += itemType.rawValue.computeEnumSize(2)
      }
      if hasExpireMs {
        serialize_size += expireMs.computeInt64Size(3)
      }
      if hasAppliedMs {
        serialize_size += appliedMs.computeInt64Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.AppliedItem> {
      var mergedArray = Array<Pogoprotos.Inventory.AppliedItem>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.AppliedItem? {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.AppliedItem.Builder {
      return Pogoprotos.Inventory.AppliedItem.classBuilder() as! Pogoprotos.Inventory.AppliedItem.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.AppliedItem.Builder {
      return classBuilder() as! Pogoprotos.Inventory.AppliedItem.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.AppliedItem.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.AppliedItem.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.AppliedItem.Builder {
      return try Pogoprotos.Inventory.AppliedItem.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.AppliedItem) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
      return try Pogoprotos.Inventory.AppliedItem.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasItemType {
        jsonMap["itemType"] = itemType.toString()
      }
      if hasExpireMs {
        jsonMap["expireMs"] = "\(expireMs)"
      }
      if hasAppliedMs {
        jsonMap["appliedMs"] = "\(appliedMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.AppliedItem {
      return try Pogoprotos.Inventory.AppliedItem.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if (hasItemType) {
        output += "\(indent) itemType: \(itemType.description)\n"
      }
      if hasExpireMs {
        output += "\(indent) expireMs: \(expireMs) \n"
      }
      if hasAppliedMs {
        output += "\(indent) appliedMs: \(appliedMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasItemType {
               hashCode = (hashCode &* 31) &+ Int(itemType.rawValue)
            }
            if hasExpireMs {
               hashCode = (hashCode &* 31) &+ expireMs.hashValue
            }
            if hasAppliedMs {
               hashCode = (hashCode &* 31) &+ appliedMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.AppliedItem"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.AppliedItem"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.AppliedItem.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.AppliedItem = Pogoprotos.Inventory.AppliedItem()
      public func getMessage() -> Pogoprotos.Inventory.AppliedItem {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.ItemId) -> Pogoprotos.Inventory.AppliedItem.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Inventory.AppliedItem.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
        public var hasItemType:Bool{
            get {
                return builderResult.hasItemType
            }
        }
        public var itemType:Pogoprotos.Inventory.ItemType {
            get {
                return builderResult.itemType
            }
            set (value) {
                builderResult.hasItemType = true
                builderResult.itemType = value
            }
        }
        public func setItemType(value:Pogoprotos.Inventory.ItemType) -> Pogoprotos.Inventory.AppliedItem.Builder {
          self.itemType = value
          return self
        }
        public func clearItemType() -> Pogoprotos.Inventory.AppliedItem.Builder {
           builderResult.hasItemType = false
           builderResult.itemType = .ItemTypeNone
           return self
        }
      public var hasExpireMs:Bool {
           get {
                return builderResult.hasExpireMs
           }
      }
      public var expireMs:Int64 {
           get {
                return builderResult.expireMs
           }
           set (value) {
               builderResult.hasExpireMs = true
               builderResult.expireMs = value
           }
      }
      public func setExpireMs(value:Int64) -> Pogoprotos.Inventory.AppliedItem.Builder {
        self.expireMs = value
        return self
      }
      public func clearExpireMs() -> Pogoprotos.Inventory.AppliedItem.Builder{
           builderResult.hasExpireMs = false
           builderResult.expireMs = Int64(0)
           return self
      }
      public var hasAppliedMs:Bool {
           get {
                return builderResult.hasAppliedMs
           }
      }
      public var appliedMs:Int64 {
           get {
                return builderResult.appliedMs
           }
           set (value) {
               builderResult.hasAppliedMs = true
               builderResult.appliedMs = value
           }
      }
      public func setAppliedMs(value:Int64) -> Pogoprotos.Inventory.AppliedItem.Builder {
        self.appliedMs = value
        return self
      }
      public func clearAppliedMs() -> Pogoprotos.Inventory.AppliedItem.Builder{
           builderResult.hasAppliedMs = false
           builderResult.appliedMs = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.AppliedItem.Builder {
        builderResult = Pogoprotos.Inventory.AppliedItem()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.AppliedItem.Builder {
        return try Pogoprotos.Inventory.AppliedItem.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.AppliedItem {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.AppliedItem {
        let returnMe:Pogoprotos.Inventory.AppliedItem = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.AppliedItem) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
        if other == Pogoprotos.Inventory.AppliedItem() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasItemType {
             itemType = other.itemType
        }
        if other.hasExpireMs {
             expireMs = other.expireMs
        }
        if other.hasAppliedMs {
             appliedMs = other.appliedMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            let valueIntitemType = try input.readEnum()
            if let enumsitemType = Pogoprotos.Inventory.ItemType(rawValue:valueIntitemType){
                 itemType = enumsitemType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntitemType))
            }

          case 24:
            expireMs = try input.readInt64()

          case 32:
            appliedMs = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.AppliedItem.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueItemType = jsonMap["itemType"] as? String {
          resultDecodedBuilder.itemType = try Pogoprotos.Inventory.ItemType.fromString(jsonValueItemType)
        }
        if let jsonValueExpireMs = jsonMap["expireMs"] as? String {
          resultDecodedBuilder.expireMs = Int64(jsonValueExpireMs)!
        }
        if let jsonValueAppliedMs = jsonMap["appliedMs"] as? String {
          resultDecodedBuilder.appliedMs = Int64(jsonValueAppliedMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.AppliedItem.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.AppliedItem.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class AppliedItems : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var item:Array<Pogoprotos.Inventory.AppliedItem>  = Array<Pogoprotos.Inventory.AppliedItem>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementItem in item {
          try output.writeMessage(4, value:oneElementItem)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementItem in item {
          serialize_size += oneElementItem.computeMessageSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.AppliedItems> {
      var mergedArray = Array<Pogoprotos.Inventory.AppliedItems>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.AppliedItems? {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.AppliedItems.Builder {
      return Pogoprotos.Inventory.AppliedItems.classBuilder() as! Pogoprotos.Inventory.AppliedItems.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.AppliedItems.Builder {
      return classBuilder() as! Pogoprotos.Inventory.AppliedItems.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.AppliedItems.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.AppliedItems.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.AppliedItems.Builder {
      return try Pogoprotos.Inventory.AppliedItems.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.AppliedItems) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
      return try Pogoprotos.Inventory.AppliedItems.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !item.isEmpty {
        var jsonArrayItem:Array<Dictionary<String,AnyObject>> = []
          for oneValueItem in item {
            let ecodedMessageItem = try oneValueItem.encode()
            jsonArrayItem += [ecodedMessageItem]
          }
        jsonMap["item"] = jsonArrayItem
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.AppliedItems {
      return try Pogoprotos.Inventory.AppliedItems.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var itemElementIndex:Int = 0
      for oneElementItem in item {
          output += "\(indent) item[\(itemElementIndex)] {\n"
          output += try oneElementItem.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          itemElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementItem in item {
                hashCode = (hashCode &* 31) &+ oneElementItem.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.AppliedItems"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.AppliedItems"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.AppliedItems.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.AppliedItems = Pogoprotos.Inventory.AppliedItems()
      public func getMessage() -> Pogoprotos.Inventory.AppliedItems {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var item:Array<Pogoprotos.Inventory.AppliedItem> {
           get {
               return builderResult.item
           }
           set (value) {
               builderResult.item = value
           }
      }
      public func setItem(value:Array<Pogoprotos.Inventory.AppliedItem>) -> Pogoprotos.Inventory.AppliedItems.Builder {
        self.item = value
        return self
      }
      public func clearItem() -> Pogoprotos.Inventory.AppliedItems.Builder {
        builderResult.item.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.AppliedItems.Builder {
        builderResult = Pogoprotos.Inventory.AppliedItems()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.AppliedItems.Builder {
        return try Pogoprotos.Inventory.AppliedItems.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.AppliedItems {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.AppliedItems {
        let returnMe:Pogoprotos.Inventory.AppliedItems = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.AppliedItems) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
        if other == Pogoprotos.Inventory.AppliedItems() {
         return self
        }
        if !other.item.isEmpty  {
           builderResult.item += other.item
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 34:
            let subBuilder = Pogoprotos.Inventory.AppliedItem.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            item += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.AppliedItems.Builder()
        if let jsonValueItem = jsonMap["item"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayItem:Array<Pogoprotos.Inventory.AppliedItem> = []
          for oneValueItem in jsonValueItem {
            let messageFromStringItem = try Pogoprotos.Inventory.AppliedItem.Builder.decodeToBuilder(oneValueItem).build()

            jsonArrayItem += [messageFromStringItem]
          }
          resultDecodedBuilder.item = jsonArrayItem
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.AppliedItems.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.AppliedItems.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class EggIncubator : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var itemId:Pogoprotos.Inventory.ItemId = Pogoprotos.Inventory.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var incubatorType:Pogoprotos.Inventory.EggIncubatorType = Pogoprotos.Inventory.EggIncubatorType.IncubatorUnset
    public private(set) var hasIncubatorType:Bool = false
    public private(set) var hasUsesRemaining:Bool = false
    public private(set) var usesRemaining:Int32 = Int32(0)

    // TODO: Check if is PokemonType
    public private(set) var hasPokemonId:Bool = false
    public private(set) var pokemonId:UInt64 = UInt64(0)

    public private(set) var hasStartKmWalked:Bool = false
    public private(set) var startKmWalked:Double = Double(0)

    public private(set) var hasTargetKmWalked:Bool = false
    public private(set) var targetKmWalked:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasItemId {
        try output.writeEnum(2, value:itemId.rawValue)
      }
      if hasIncubatorType {
        try output.writeEnum(3, value:incubatorType.rawValue)
      }
      if hasUsesRemaining {
        try output.writeInt32(4, value:usesRemaining)
      }
      if hasPokemonId {
        try output.writeUInt64(5, value:pokemonId)
      }
      if hasStartKmWalked {
        try output.writeDouble(6, value:startKmWalked)
      }
      if hasTargetKmWalked {
        try output.writeDouble(7, value:targetKmWalked)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(2)
      }
      if (hasIncubatorType) {
        serialize_size += incubatorType.rawValue.computeEnumSize(3)
      }
      if hasUsesRemaining {
        serialize_size += usesRemaining.computeInt32Size(4)
      }
      if hasPokemonId {
        serialize_size += pokemonId.computeUInt64Size(5)
      }
      if hasStartKmWalked {
        serialize_size += startKmWalked.computeDoubleSize(6)
      }
      if hasTargetKmWalked {
        serialize_size += targetKmWalked.computeDoubleSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.EggIncubator> {
      var mergedArray = Array<Pogoprotos.Inventory.EggIncubator>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.EggIncubator? {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.EggIncubator.Builder {
      return Pogoprotos.Inventory.EggIncubator.classBuilder() as! Pogoprotos.Inventory.EggIncubator.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.EggIncubator.Builder {
      return classBuilder() as! Pogoprotos.Inventory.EggIncubator.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.EggIncubator.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.EggIncubator.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.EggIncubator.Builder {
      return try Pogoprotos.Inventory.EggIncubator.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.EggIncubator) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
      return try Pogoprotos.Inventory.EggIncubator.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasId {
        jsonMap["id"] = id
      }
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasIncubatorType {
        jsonMap["incubatorType"] = incubatorType.toString()
      }
      if hasUsesRemaining {
        jsonMap["usesRemaining"] = NSNumber(int:usesRemaining)
      }
      if hasPokemonId {
        jsonMap["pokemonId"] = "\(pokemonId)"
      }
      if hasStartKmWalked {
        jsonMap["startKmWalked"] = NSNumber(double:startKmWalked)
      }
      if hasTargetKmWalked {
        jsonMap["targetKmWalked"] = NSNumber(double:targetKmWalked)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.EggIncubator {
      return try Pogoprotos.Inventory.EggIncubator.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if (hasIncubatorType) {
        output += "\(indent) incubatorType: \(incubatorType.description)\n"
      }
      if hasUsesRemaining {
        output += "\(indent) usesRemaining: \(usesRemaining) \n"
      }
      if hasPokemonId {
        output += "\(indent) pokemonId: \(pokemonId) \n"
      }
      if hasStartKmWalked {
        output += "\(indent) startKmWalked: \(startKmWalked) \n"
      }
      if hasTargetKmWalked {
        output += "\(indent) targetKmWalked: \(targetKmWalked) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasIncubatorType {
               hashCode = (hashCode &* 31) &+ Int(incubatorType.rawValue)
            }
            if hasUsesRemaining {
               hashCode = (hashCode &* 31) &+ usesRemaining.hashValue
            }
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ pokemonId.hashValue
            }
            if hasStartKmWalked {
               hashCode = (hashCode &* 31) &+ startKmWalked.hashValue
            }
            if hasTargetKmWalked {
               hashCode = (hashCode &* 31) &+ targetKmWalked.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.EggIncubator"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.EggIncubator"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.EggIncubator.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.EggIncubator = Pogoprotos.Inventory.EggIncubator()
      public func getMessage() -> Pogoprotos.Inventory.EggIncubator {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Pogoprotos.Inventory.EggIncubator.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Pogoprotos.Inventory.EggIncubator.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.ItemId) -> Pogoprotos.Inventory.EggIncubator.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Inventory.EggIncubator.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
        public var hasIncubatorType:Bool{
            get {
                return builderResult.hasIncubatorType
            }
        }
        public var incubatorType:Pogoprotos.Inventory.EggIncubatorType {
            get {
                return builderResult.incubatorType
            }
            set (value) {
                builderResult.hasIncubatorType = true
                builderResult.incubatorType = value
            }
        }
        public func setIncubatorType(value:Pogoprotos.Inventory.EggIncubatorType) -> Pogoprotos.Inventory.EggIncubator.Builder {
          self.incubatorType = value
          return self
        }
        public func clearIncubatorType() -> Pogoprotos.Inventory.EggIncubator.Builder {
           builderResult.hasIncubatorType = false
           builderResult.incubatorType = .IncubatorUnset
           return self
        }
      public var hasUsesRemaining:Bool {
           get {
                return builderResult.hasUsesRemaining
           }
      }
      public var usesRemaining:Int32 {
           get {
                return builderResult.usesRemaining
           }
           set (value) {
               builderResult.hasUsesRemaining = true
               builderResult.usesRemaining = value
           }
      }
      public func setUsesRemaining(value:Int32) -> Pogoprotos.Inventory.EggIncubator.Builder {
        self.usesRemaining = value
        return self
      }
      public func clearUsesRemaining() -> Pogoprotos.Inventory.EggIncubator.Builder{
           builderResult.hasUsesRemaining = false
           builderResult.usesRemaining = Int32(0)
           return self
      }
      public var hasPokemonId:Bool {
           get {
                return builderResult.hasPokemonId
           }
      }
      public var pokemonId:UInt64 {
           get {
                return builderResult.pokemonId
           }
           set (value) {
               builderResult.hasPokemonId = true
               builderResult.pokemonId = value
           }
      }
      public func setPokemonId(value:UInt64) -> Pogoprotos.Inventory.EggIncubator.Builder {
        self.pokemonId = value
        return self
      }
      public func clearPokemonId() -> Pogoprotos.Inventory.EggIncubator.Builder{
           builderResult.hasPokemonId = false
           builderResult.pokemonId = UInt64(0)
           return self
      }
      public var hasStartKmWalked:Bool {
           get {
                return builderResult.hasStartKmWalked
           }
      }
      public var startKmWalked:Double {
           get {
                return builderResult.startKmWalked
           }
           set (value) {
               builderResult.hasStartKmWalked = true
               builderResult.startKmWalked = value
           }
      }
      public func setStartKmWalked(value:Double) -> Pogoprotos.Inventory.EggIncubator.Builder {
        self.startKmWalked = value
        return self
      }
      public func clearStartKmWalked() -> Pogoprotos.Inventory.EggIncubator.Builder{
           builderResult.hasStartKmWalked = false
           builderResult.startKmWalked = Double(0)
           return self
      }
      public var hasTargetKmWalked:Bool {
           get {
                return builderResult.hasTargetKmWalked
           }
      }
      public var targetKmWalked:Double {
           get {
                return builderResult.targetKmWalked
           }
           set (value) {
               builderResult.hasTargetKmWalked = true
               builderResult.targetKmWalked = value
           }
      }
      public func setTargetKmWalked(value:Double) -> Pogoprotos.Inventory.EggIncubator.Builder {
        self.targetKmWalked = value
        return self
      }
      public func clearTargetKmWalked() -> Pogoprotos.Inventory.EggIncubator.Builder{
           builderResult.hasTargetKmWalked = false
           builderResult.targetKmWalked = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.EggIncubator.Builder {
        builderResult = Pogoprotos.Inventory.EggIncubator()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.EggIncubator.Builder {
        return try Pogoprotos.Inventory.EggIncubator.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.EggIncubator {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.EggIncubator {
        let returnMe:Pogoprotos.Inventory.EggIncubator = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.EggIncubator) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
        if other == Pogoprotos.Inventory.EggIncubator() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasIncubatorType {
             incubatorType = other.incubatorType
        }
        if other.hasUsesRemaining {
             usesRemaining = other.usesRemaining
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasStartKmWalked {
             startKmWalked = other.startKmWalked
        }
        if other.hasTargetKmWalked {
             targetKmWalked = other.targetKmWalked
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            id = try input.readString()

          case 16:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntitemId))
            }

          case 24:
            let valueIntincubatorType = try input.readEnum()
            if let enumsincubatorType = Pogoprotos.Inventory.EggIncubatorType(rawValue:valueIntincubatorType){
                 incubatorType = enumsincubatorType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntincubatorType))
            }

          case 32:
            usesRemaining = try input.readInt32()

          case 40:
            pokemonId = try input.readUInt64()

          case 49:
            startKmWalked = try input.readDouble()

          case 57:
            targetKmWalked = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.EggIncubator.Builder()
        if let jsonValueId = jsonMap["id"] as? String {
          resultDecodedBuilder.id = jsonValueId
        }
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueIncubatorType = jsonMap["incubatorType"] as? String {
          resultDecodedBuilder.incubatorType = try Pogoprotos.Inventory.EggIncubatorType.fromString(jsonValueIncubatorType)
        }
        if let jsonValueUsesRemaining = jsonMap["usesRemaining"] as? NSNumber {
          resultDecodedBuilder.usesRemaining = jsonValueUsesRemaining.intValue
        }
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = UInt64(jsonValuePokemonId)!
        }
        if let jsonValueStartKmWalked = jsonMap["startKmWalked"] as? NSNumber {
          resultDecodedBuilder.startKmWalked = jsonValueStartKmWalked.doubleValue
        }
        if let jsonValueTargetKmWalked = jsonMap["targetKmWalked"] as? NSNumber {
          resultDecodedBuilder.targetKmWalked = jsonValueTargetKmWalked.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.EggIncubator.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.EggIncubator.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class EggIncubators : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEggIncubator:Bool = false
    public private(set) var eggIncubator:Pogoprotos.Inventory.EggIncubator!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEggIncubator {
        try output.writeMessage(1, value:eggIncubator)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEggIncubator {
          if let varSizeeggIncubator = eggIncubator?.computeMessageSize(1) {
              serialize_size += varSizeeggIncubator
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.EggIncubators> {
      var mergedArray = Array<Pogoprotos.Inventory.EggIncubators>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.EggIncubators? {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.EggIncubators.Builder {
      return Pogoprotos.Inventory.EggIncubators.classBuilder() as! Pogoprotos.Inventory.EggIncubators.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.EggIncubators.Builder {
      return classBuilder() as! Pogoprotos.Inventory.EggIncubators.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.EggIncubators.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.EggIncubators.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.EggIncubators.Builder {
      return try Pogoprotos.Inventory.EggIncubators.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.EggIncubators) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
      return try Pogoprotos.Inventory.EggIncubators.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEggIncubator {
        jsonMap["eggIncubator"] = try eggIncubator.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.EggIncubators {
      return try Pogoprotos.Inventory.EggIncubators.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEggIncubator {
        output += "\(indent) eggIncubator {\n"
        if let outDescEggIncubator = eggIncubator {
          output += try outDescEggIncubator.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEggIncubator {
                if let hashValueeggIncubator = eggIncubator?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueeggIncubator
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.EggIncubators"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.EggIncubators"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.EggIncubators.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.EggIncubators = Pogoprotos.Inventory.EggIncubators()
      public func getMessage() -> Pogoprotos.Inventory.EggIncubators {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEggIncubator:Bool {
           get {
               return builderResult.hasEggIncubator
           }
      }
      public var eggIncubator:Pogoprotos.Inventory.EggIncubator! {
           get {
               if eggIncubatorBuilder_ != nil {
                  builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
               }
               return builderResult.eggIncubator
           }
           set (value) {
               builderResult.hasEggIncubator = true
               builderResult.eggIncubator = value
           }
      }
      private var eggIncubatorBuilder_:Pogoprotos.Inventory.EggIncubator.Builder! {
           didSet {
              builderResult.hasEggIncubator = true
           }
      }
      public func getEggIncubatorBuilder() -> Pogoprotos.Inventory.EggIncubator.Builder {
        if eggIncubatorBuilder_ == nil {
           eggIncubatorBuilder_ = Pogoprotos.Inventory.EggIncubator.Builder()
           builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
           if eggIncubator != nil {
              try! eggIncubatorBuilder_.mergeFrom(eggIncubator)
           }
        }
        return eggIncubatorBuilder_
      }
      public func setEggIncubator(value:Pogoprotos.Inventory.EggIncubator!) -> Pogoprotos.Inventory.EggIncubators.Builder {
        self.eggIncubator = value
        return self
      }
      public func mergeEggIncubator(value:Pogoprotos.Inventory.EggIncubator) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        if builderResult.hasEggIncubator {
          builderResult.eggIncubator = try Pogoprotos.Inventory.EggIncubator.builderWithPrototype(builderResult.eggIncubator).mergeFrom(value).buildPartial()
        } else {
          builderResult.eggIncubator = value
        }
        builderResult.hasEggIncubator = true
        return self
      }
      public func clearEggIncubator() -> Pogoprotos.Inventory.EggIncubators.Builder {
        eggIncubatorBuilder_ = nil
        builderResult.hasEggIncubator = false
        builderResult.eggIncubator = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.EggIncubators.Builder {
        builderResult = Pogoprotos.Inventory.EggIncubators()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        return try Pogoprotos.Inventory.EggIncubators.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.EggIncubators {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.EggIncubators {
        let returnMe:Pogoprotos.Inventory.EggIncubators = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.EggIncubators) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        if other == Pogoprotos.Inventory.EggIncubators() {
         return self
        }
        if (other.hasEggIncubator) {
            try mergeEggIncubator(other.eggIncubator)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:Pogoprotos.Inventory.EggIncubator.Builder = Pogoprotos.Inventory.EggIncubator.Builder()
            if hasEggIncubator {
              try subBuilder.mergeFrom(eggIncubator)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            eggIncubator = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.EggIncubators.Builder()
        if let jsonValueEggIncubator = jsonMap["eggIncubator"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.eggIncubator = try Pogoprotos.Inventory.EggIncubator.Builder.decodeToBuilder(jsonValueEggIncubator).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.EggIncubators.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.EggIncubators.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventoryDelta : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasOriginalTimestampMs:Bool = false
    public private(set) var originalTimestampMs:Int64 = Int64(0)

    public private(set) var hasNewTimestampMs:Bool = false
    public private(set) var newTimestampMs:Int64 = Int64(0)

    public private(set) var inventoryItems:Array<Pogoprotos.Inventory.InventoryItem>  = Array<Pogoprotos.Inventory.InventoryItem>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasOriginalTimestampMs {
        try output.writeInt64(1, value:originalTimestampMs)
      }
      if hasNewTimestampMs {
        try output.writeInt64(2, value:newTimestampMs)
      }
      for oneElementInventoryItems in inventoryItems {
          try output.writeMessage(3, value:oneElementInventoryItems)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOriginalTimestampMs {
        serialize_size += originalTimestampMs.computeInt64Size(1)
      }
      if hasNewTimestampMs {
        serialize_size += newTimestampMs.computeInt64Size(2)
      }
      for oneElementInventoryItems in inventoryItems {
          serialize_size += oneElementInventoryItems.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryDelta> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryDelta>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryDelta? {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return Pogoprotos.Inventory.InventoryDelta.classBuilder() as! Pogoprotos.Inventory.InventoryDelta.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryDelta.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryDelta.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryDelta.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return try Pogoprotos.Inventory.InventoryDelta.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryDelta) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasOriginalTimestampMs {
        jsonMap["originalTimestampMs"] = "\(originalTimestampMs)"
      }
      if hasNewTimestampMs {
        jsonMap["newTimestampMs"] = "\(newTimestampMs)"
      }
      if !inventoryItems.isEmpty {
        var jsonArrayInventoryItems:Array<Dictionary<String,AnyObject>> = []
          for oneValueInventoryItems in inventoryItems {
            let ecodedMessageInventoryItems = try oneValueInventoryItems.encode()
            jsonArrayInventoryItems += [ecodedMessageInventoryItems]
          }
        jsonMap["inventoryItems"] = jsonArrayInventoryItems
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasOriginalTimestampMs {
        output += "\(indent) originalTimestampMs: \(originalTimestampMs) \n"
      }
      if hasNewTimestampMs {
        output += "\(indent) newTimestampMs: \(newTimestampMs) \n"
      }
      var inventoryItemsElementIndex:Int = 0
      for oneElementInventoryItems in inventoryItems {
          output += "\(indent) inventoryItems[\(inventoryItemsElementIndex)] {\n"
          output += try oneElementInventoryItems.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          inventoryItemsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOriginalTimestampMs {
               hashCode = (hashCode &* 31) &+ originalTimestampMs.hashValue
            }
            if hasNewTimestampMs {
               hashCode = (hashCode &* 31) &+ newTimestampMs.hashValue
            }
            for oneElementInventoryItems in inventoryItems {
                hashCode = (hashCode &* 31) &+ oneElementInventoryItems.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryDelta"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryDelta"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryDelta.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryDelta = Pogoprotos.Inventory.InventoryDelta()
      public func getMessage() -> Pogoprotos.Inventory.InventoryDelta {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOriginalTimestampMs:Bool {
           get {
                return builderResult.hasOriginalTimestampMs
           }
      }
      public var originalTimestampMs:Int64 {
           get {
                return builderResult.originalTimestampMs
           }
           set (value) {
               builderResult.hasOriginalTimestampMs = true
               builderResult.originalTimestampMs = value
           }
      }
      public func setOriginalTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.originalTimestampMs = value
        return self
      }
      public func clearOriginalTimestampMs() -> Pogoprotos.Inventory.InventoryDelta.Builder{
           builderResult.hasOriginalTimestampMs = false
           builderResult.originalTimestampMs = Int64(0)
           return self
      }
      public var hasNewTimestampMs:Bool {
           get {
                return builderResult.hasNewTimestampMs
           }
      }
      public var newTimestampMs:Int64 {
           get {
                return builderResult.newTimestampMs
           }
           set (value) {
               builderResult.hasNewTimestampMs = true
               builderResult.newTimestampMs = value
           }
      }
      public func setNewTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.newTimestampMs = value
        return self
      }
      public func clearNewTimestampMs() -> Pogoprotos.Inventory.InventoryDelta.Builder{
           builderResult.hasNewTimestampMs = false
           builderResult.newTimestampMs = Int64(0)
           return self
      }
      public var inventoryItems:Array<Pogoprotos.Inventory.InventoryItem> {
           get {
               return builderResult.inventoryItems
           }
           set (value) {
               builderResult.inventoryItems = value
           }
      }
      public func setInventoryItems(value:Array<Pogoprotos.Inventory.InventoryItem>) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.inventoryItems = value
        return self
      }
      public func clearInventoryItems() -> Pogoprotos.Inventory.InventoryDelta.Builder {
        builderResult.inventoryItems.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryDelta.Builder {
        builderResult = Pogoprotos.Inventory.InventoryDelta()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        return try Pogoprotos.Inventory.InventoryDelta.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryDelta {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryDelta {
        let returnMe:Pogoprotos.Inventory.InventoryDelta = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryDelta) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        if other == Pogoprotos.Inventory.InventoryDelta() {
         return self
        }
        if other.hasOriginalTimestampMs {
             originalTimestampMs = other.originalTimestampMs
        }
        if other.hasNewTimestampMs {
             newTimestampMs = other.newTimestampMs
        }
        if !other.inventoryItems.isEmpty  {
           builderResult.inventoryItems += other.inventoryItems
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            originalTimestampMs = try input.readInt64()

          case 16:
            newTimestampMs = try input.readInt64()

          case 26:
            let subBuilder = Pogoprotos.Inventory.InventoryItem.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            inventoryItems += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryDelta.Builder()
        if let jsonValueOriginalTimestampMs = jsonMap["originalTimestampMs"] as? String {
          resultDecodedBuilder.originalTimestampMs = Int64(jsonValueOriginalTimestampMs)!
        }
        if let jsonValueNewTimestampMs = jsonMap["newTimestampMs"] as? String {
          resultDecodedBuilder.newTimestampMs = Int64(jsonValueNewTimestampMs)!
        }
        if let jsonValueInventoryItems = jsonMap["inventoryItems"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayInventoryItems:Array<Pogoprotos.Inventory.InventoryItem> = []
          for oneValueInventoryItems in jsonValueInventoryItems {
            let messageFromStringInventoryItems = try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(oneValueInventoryItems).build()

            jsonArrayInventoryItems += [messageFromStringInventoryItems]
          }
          resultDecodedBuilder.inventoryItems = jsonArrayInventoryItems
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryDelta.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventoryItem : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasModifiedTimestampMs:Bool = false
    public private(set) var modifiedTimestampMs:Int64 = Int64(0)

    public private(set) var hasDeletedItemKey:Bool = false
    public private(set) var deletedItemKey:Int64 = Int64(0)

    public private(set) var hasInventoryItemData:Bool = false
    public private(set) var inventoryItemData:Pogoprotos.Inventory.InventoryItemData!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasModifiedTimestampMs {
        try output.writeInt64(1, value:modifiedTimestampMs)
      }
      if hasDeletedItemKey {
        try output.writeInt64(2, value:deletedItemKey)
      }
      if hasInventoryItemData {
        try output.writeMessage(3, value:inventoryItemData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasModifiedTimestampMs {
        serialize_size += modifiedTimestampMs.computeInt64Size(1)
      }
      if hasDeletedItemKey {
        serialize_size += deletedItemKey.computeInt64Size(2)
      }
      if hasInventoryItemData {
          if let varSizeinventoryItemData = inventoryItemData?.computeMessageSize(3) {
              serialize_size += varSizeinventoryItemData
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryItem> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryItem>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItem? {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryItem.Builder {
      return Pogoprotos.Inventory.InventoryItem.classBuilder() as! Pogoprotos.Inventory.InventoryItem.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryItem.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryItem.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItem.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItem.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryItem.Builder {
      return try Pogoprotos.Inventory.InventoryItem.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryItem) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasModifiedTimestampMs {
        jsonMap["modifiedTimestampMs"] = "\(modifiedTimestampMs)"
      }
      if hasDeletedItemKey {
        jsonMap["deletedItemKey"] = "\(deletedItemKey)"
      }
      if hasInventoryItemData {
        jsonMap["inventoryItemData"] = try inventoryItemData.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasModifiedTimestampMs {
        output += "\(indent) modifiedTimestampMs: \(modifiedTimestampMs) \n"
      }
      if hasDeletedItemKey {
        output += "\(indent) deletedItemKey: \(deletedItemKey) \n"
      }
      if hasInventoryItemData {
        output += "\(indent) inventoryItemData {\n"
        if let outDescInventoryItemData = inventoryItemData {
          output += try outDescInventoryItemData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ modifiedTimestampMs.hashValue
            }
            if hasDeletedItemKey {
               hashCode = (hashCode &* 31) &+ deletedItemKey.hashValue
            }
            if hasInventoryItemData {
                if let hashValueinventoryItemData = inventoryItemData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryItemData
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryItem"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryItem"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryItem.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryItem = Pogoprotos.Inventory.InventoryItem()
      public func getMessage() -> Pogoprotos.Inventory.InventoryItem {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasModifiedTimestampMs:Bool {
           get {
                return builderResult.hasModifiedTimestampMs
           }
      }
      public var modifiedTimestampMs:Int64 {
           get {
                return builderResult.modifiedTimestampMs
           }
           set (value) {
               builderResult.hasModifiedTimestampMs = true
               builderResult.modifiedTimestampMs = value
           }
      }
      public func setModifiedTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.modifiedTimestampMs = value
        return self
      }
      public func clearModifiedTimestampMs() -> Pogoprotos.Inventory.InventoryItem.Builder{
           builderResult.hasModifiedTimestampMs = false
           builderResult.modifiedTimestampMs = Int64(0)
           return self
      }
      public var hasDeletedItemKey:Bool {
           get {
                return builderResult.hasDeletedItemKey
           }
      }
      public var deletedItemKey:Int64 {
           get {
                return builderResult.deletedItemKey
           }
           set (value) {
               builderResult.hasDeletedItemKey = true
               builderResult.deletedItemKey = value
           }
      }
      public func setDeletedItemKey(value:Int64) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.deletedItemKey = value
        return self
      }
      public func clearDeletedItemKey() -> Pogoprotos.Inventory.InventoryItem.Builder{
           builderResult.hasDeletedItemKey = false
           builderResult.deletedItemKey = Int64(0)
           return self
      }
      public var hasInventoryItemData:Bool {
           get {
               return builderResult.hasInventoryItemData
           }
      }
      public var inventoryItemData:Pogoprotos.Inventory.InventoryItemData! {
           get {
               if inventoryItemDataBuilder_ != nil {
                  builderResult.inventoryItemData = inventoryItemDataBuilder_.getMessage()
               }
               return builderResult.inventoryItemData
           }
           set (value) {
               builderResult.hasInventoryItemData = true
               builderResult.inventoryItemData = value
           }
      }
      private var inventoryItemDataBuilder_:Pogoprotos.Inventory.InventoryItemData.Builder! {
           didSet {
              builderResult.hasInventoryItemData = true
           }
      }
      public func getInventoryItemDataBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if inventoryItemDataBuilder_ == nil {
           inventoryItemDataBuilder_ = Pogoprotos.Inventory.InventoryItemData.Builder()
           builderResult.inventoryItemData = inventoryItemDataBuilder_.getMessage()
           if inventoryItemData != nil {
              try! inventoryItemDataBuilder_.mergeFrom(inventoryItemData)
           }
        }
        return inventoryItemDataBuilder_
      }
      public func setInventoryItemData(value:Pogoprotos.Inventory.InventoryItemData!) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.inventoryItemData = value
        return self
      }
      public func mergeInventoryItemData(value:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        if builderResult.hasInventoryItemData {
          builderResult.inventoryItemData = try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(builderResult.inventoryItemData).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryItemData = value
        }
        builderResult.hasInventoryItemData = true
        return self
      }
      public func clearInventoryItemData() -> Pogoprotos.Inventory.InventoryItem.Builder {
        inventoryItemDataBuilder_ = nil
        builderResult.hasInventoryItemData = false
        builderResult.inventoryItemData = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryItem.Builder {
        builderResult = Pogoprotos.Inventory.InventoryItem()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        return try Pogoprotos.Inventory.InventoryItem.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryItem {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryItem {
        let returnMe:Pogoprotos.Inventory.InventoryItem = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryItem) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        if other == Pogoprotos.Inventory.InventoryItem() {
         return self
        }
        if other.hasModifiedTimestampMs {
             modifiedTimestampMs = other.modifiedTimestampMs
        }
        if other.hasDeletedItemKey {
             deletedItemKey = other.deletedItemKey
        }
        if (other.hasInventoryItemData) {
            try mergeInventoryItemData(other.inventoryItemData)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            modifiedTimestampMs = try input.readInt64()

          case 16:
            deletedItemKey = try input.readInt64()

          case 26:
            let subBuilder:Pogoprotos.Inventory.InventoryItemData.Builder = Pogoprotos.Inventory.InventoryItemData.Builder()
            if hasInventoryItemData {
              try subBuilder.mergeFrom(inventoryItemData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryItemData = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryItem.Builder()
        if let jsonValueModifiedTimestampMs = jsonMap["modifiedTimestampMs"] as? String {
          resultDecodedBuilder.modifiedTimestampMs = Int64(jsonValueModifiedTimestampMs)!
        }
        if let jsonValueDeletedItemKey = jsonMap["deletedItemKey"] as? String {
          resultDecodedBuilder.deletedItemKey = Int64(jsonValueDeletedItemKey)!
        }
        if let jsonValueInventoryItemData = jsonMap["inventoryItemData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryItemData = try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsonValueInventoryItemData).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventoryItemData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPokemonData:Bool = false
    public private(set) var pokemonData:Pogoprotos.Data.PokemonData!
    public private(set) var hasItem:Bool = false
    public private(set) var item:Pogoprotos.Inventory.Item!
    public private(set) var hasPokedexEntry:Bool = false
    public private(set) var pokedexEntry:Pogoprotos.Data.PokedexEntry!
    public private(set) var hasPlayerStats:Bool = false
    public private(set) var playerStats:Pogoprotos.Data.Player.PlayerStats!
    public private(set) var hasPlayerCurrency:Bool = false
    public private(set) var playerCurrency:Pogoprotos.Data.Player.PlayerCurrency!
    public private(set) var hasPlayerCamera:Bool = false
    public private(set) var playerCamera:Pogoprotos.Data.Player.PlayerCamera!
    public private(set) var hasInventoryUpgrades:Bool = false
    public private(set) var inventoryUpgrades:Pogoprotos.Inventory.InventoryUpgrades!
    public private(set) var hasAppliedItems:Bool = false
    public private(set) var appliedItems:Pogoprotos.Inventory.AppliedItems!
    public private(set) var hasEggIncubators:Bool = false
    public private(set) var eggIncubators:Pogoprotos.Inventory.EggIncubators!
    public private(set) var hasPokemonFamily:Bool = false
    public private(set) var pokemonFamily:Pogoprotos.Inventory.PokemonFamily!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonData {
        try output.writeMessage(1, value:pokemonData)
      }
      if hasItem {
        try output.writeMessage(2, value:item)
      }
      if hasPokedexEntry {
        try output.writeMessage(3, value:pokedexEntry)
      }
      if hasPlayerStats {
        try output.writeMessage(4, value:playerStats)
      }
      if hasPlayerCurrency {
        try output.writeMessage(5, value:playerCurrency)
      }
      if hasPlayerCamera {
        try output.writeMessage(6, value:playerCamera)
      }
      if hasInventoryUpgrades {
        try output.writeMessage(7, value:inventoryUpgrades)
      }
      if hasAppliedItems {
        try output.writeMessage(8, value:appliedItems)
      }
      if hasEggIncubators {
        try output.writeMessage(9, value:eggIncubators)
      }
      if hasPokemonFamily {
        try output.writeMessage(10, value:pokemonFamily)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPokemonData {
          if let varSizepokemonData = pokemonData?.computeMessageSize(1) {
              serialize_size += varSizepokemonData
          }
      }
      if hasItem {
          if let varSizeitem = item?.computeMessageSize(2) {
              serialize_size += varSizeitem
          }
      }
      if hasPokedexEntry {
          if let varSizepokedexEntry = pokedexEntry?.computeMessageSize(3) {
              serialize_size += varSizepokedexEntry
          }
      }
      if hasPlayerStats {
          if let varSizeplayerStats = playerStats?.computeMessageSize(4) {
              serialize_size += varSizeplayerStats
          }
      }
      if hasPlayerCurrency {
          if let varSizeplayerCurrency = playerCurrency?.computeMessageSize(5) {
              serialize_size += varSizeplayerCurrency
          }
      }
      if hasPlayerCamera {
          if let varSizeplayerCamera = playerCamera?.computeMessageSize(6) {
              serialize_size += varSizeplayerCamera
          }
      }
      if hasInventoryUpgrades {
          if let varSizeinventoryUpgrades = inventoryUpgrades?.computeMessageSize(7) {
              serialize_size += varSizeinventoryUpgrades
          }
      }
      if hasAppliedItems {
          if let varSizeappliedItems = appliedItems?.computeMessageSize(8) {
              serialize_size += varSizeappliedItems
          }
      }
      if hasEggIncubators {
          if let varSizeeggIncubators = eggIncubators?.computeMessageSize(9) {
              serialize_size += varSizeeggIncubators
          }
      }
      if hasPokemonFamily {
          if let varSizepokemonFamily = pokemonFamily?.computeMessageSize(10) {
              serialize_size += varSizepokemonFamily
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryItemData> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryItemData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItemData? {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return Pogoprotos.Inventory.InventoryItemData.classBuilder() as! Pogoprotos.Inventory.InventoryItemData.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryItemData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItemData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItemData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonData {
        jsonMap["pokemonData"] = try pokemonData.encode()
      }
      if hasItem {
        jsonMap["item"] = try item.encode()
      }
      if hasPokedexEntry {
        jsonMap["pokedexEntry"] = try pokedexEntry.encode()
      }
      if hasPlayerStats {
        jsonMap["playerStats"] = try playerStats.encode()
      }
      if hasPlayerCurrency {
        jsonMap["playerCurrency"] = try playerCurrency.encode()
      }
      if hasPlayerCamera {
        jsonMap["playerCamera"] = try playerCamera.encode()
      }
      if hasInventoryUpgrades {
        jsonMap["inventoryUpgrades"] = try inventoryUpgrades.encode()
      }
      if hasAppliedItems {
        jsonMap["appliedItems"] = try appliedItems.encode()
      }
      if hasEggIncubators {
        jsonMap["eggIncubators"] = try eggIncubators.encode()
      }
      if hasPokemonFamily {
        jsonMap["pokemonFamily"] = try pokemonFamily.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasPokemonData {
        output += "\(indent) pokemonData {\n"
        if let outDescPokemonData = pokemonData {
          output += try outDescPokemonData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasItem {
        output += "\(indent) item {\n"
        if let outDescItem = item {
          output += try outDescItem.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPokedexEntry {
        output += "\(indent) pokedexEntry {\n"
        if let outDescPokedexEntry = pokedexEntry {
          output += try outDescPokedexEntry.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerStats {
        output += "\(indent) playerStats {\n"
        if let outDescPlayerStats = playerStats {
          output += try outDescPlayerStats.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerCurrency {
        output += "\(indent) playerCurrency {\n"
        if let outDescPlayerCurrency = playerCurrency {
          output += try outDescPlayerCurrency.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerCamera {
        output += "\(indent) playerCamera {\n"
        if let outDescPlayerCamera = playerCamera {
          output += try outDescPlayerCamera.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventoryUpgrades {
        output += "\(indent) inventoryUpgrades {\n"
        if let outDescInventoryUpgrades = inventoryUpgrades {
          output += try outDescInventoryUpgrades.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAppliedItems {
        output += "\(indent) appliedItems {\n"
        if let outDescAppliedItems = appliedItems {
          output += try outDescAppliedItems.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEggIncubators {
        output += "\(indent) eggIncubators {\n"
        if let outDescEggIncubators = eggIncubators {
          output += try outDescEggIncubators.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPokemonFamily {
        output += "\(indent) pokemonFamily {\n"
        if let outDescPokemonFamily = pokemonFamily {
          output += try outDescPokemonFamily.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonData {
                if let hashValuepokemonData = pokemonData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonData
                }
            }
            if hasItem {
                if let hashValueitem = item?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueitem
                }
            }
            if hasPokedexEntry {
                if let hashValuepokedexEntry = pokedexEntry?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokedexEntry
                }
            }
            if hasPlayerStats {
                if let hashValueplayerStats = playerStats?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerStats
                }
            }
            if hasPlayerCurrency {
                if let hashValueplayerCurrency = playerCurrency?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerCurrency
                }
            }
            if hasPlayerCamera {
                if let hashValueplayerCamera = playerCamera?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerCamera
                }
            }
            if hasInventoryUpgrades {
                if let hashValueinventoryUpgrades = inventoryUpgrades?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryUpgrades
                }
            }
            if hasAppliedItems {
                if let hashValueappliedItems = appliedItems?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueappliedItems
                }
            }
            if hasEggIncubators {
                if let hashValueeggIncubators = eggIncubators?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueeggIncubators
                }
            }
            if hasPokemonFamily {
                if let hashValuepokemonFamily = pokemonFamily?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonFamily
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryItemData"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryItemData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryItemData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryItemData = Pogoprotos.Inventory.InventoryItemData()
      public func getMessage() -> Pogoprotos.Inventory.InventoryItemData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPokemonData:Bool {
           get {
               return builderResult.hasPokemonData
           }
      }
      public var pokemonData:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataBuilder_ != nil {
                  builderResult.pokemonData = pokemonDataBuilder_.getMessage()
               }
               return builderResult.pokemonData
           }
           set (value) {
               builderResult.hasPokemonData = true
               builderResult.pokemonData = value
           }
      }
      private var pokemonDataBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonData = true
           }
      }
      public func getPokemonDataBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataBuilder_ == nil {
           pokemonDataBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonData = pokemonDataBuilder_.getMessage()
           if pokemonData != nil {
              try! pokemonDataBuilder_.mergeFrom(pokemonData)
           }
        }
        return pokemonDataBuilder_
      }
      public func setPokemonData(value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokemonData = value
        return self
      }
      public func mergePokemonData(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokemonData {
          builderResult.pokemonData = try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult.pokemonData).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonData = value
        }
        builderResult.hasPokemonData = true
        return self
      }
      public func clearPokemonData() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokemonDataBuilder_ = nil
        builderResult.hasPokemonData = false
        builderResult.pokemonData = nil
        return self
      }
      public var hasItem:Bool {
           get {
               return builderResult.hasItem
           }
      }
      public var item:Pogoprotos.Inventory.Item! {
           get {
               if itemBuilder_ != nil {
                  builderResult.item = itemBuilder_.getMessage()
               }
               return builderResult.item
           }
           set (value) {
               builderResult.hasItem = true
               builderResult.item = value
           }
      }
      private var itemBuilder_:Pogoprotos.Inventory.Item.Builder! {
           didSet {
              builderResult.hasItem = true
           }
      }
      public func getItemBuilder() -> Pogoprotos.Inventory.Item.Builder {
        if itemBuilder_ == nil {
           itemBuilder_ = Pogoprotos.Inventory.Item.Builder()
           builderResult.item = itemBuilder_.getMessage()
           if item != nil {
              try! itemBuilder_.mergeFrom(item)
           }
        }
        return itemBuilder_
      }
      public func setItem(value:Pogoprotos.Inventory.Item!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.item = value
        return self
      }
      public func mergeItem(value:Pogoprotos.Inventory.Item) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasItem {
          builderResult.item = try Pogoprotos.Inventory.Item.builderWithPrototype(builderResult.item).mergeFrom(value).buildPartial()
        } else {
          builderResult.item = value
        }
        builderResult.hasItem = true
        return self
      }
      public func clearItem() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        itemBuilder_ = nil
        builderResult.hasItem = false
        builderResult.item = nil
        return self
      }
      public var hasPokedexEntry:Bool {
           get {
               return builderResult.hasPokedexEntry
           }
      }
      public var pokedexEntry:Pogoprotos.Data.PokedexEntry! {
           get {
               if pokedexEntryBuilder_ != nil {
                  builderResult.pokedexEntry = pokedexEntryBuilder_.getMessage()
               }
               return builderResult.pokedexEntry
           }
           set (value) {
               builderResult.hasPokedexEntry = true
               builderResult.pokedexEntry = value
           }
      }
      private var pokedexEntryBuilder_:Pogoprotos.Data.PokedexEntry.Builder! {
           didSet {
              builderResult.hasPokedexEntry = true
           }
      }
      public func getPokedexEntryBuilder() -> Pogoprotos.Data.PokedexEntry.Builder {
        if pokedexEntryBuilder_ == nil {
           pokedexEntryBuilder_ = Pogoprotos.Data.PokedexEntry.Builder()
           builderResult.pokedexEntry = pokedexEntryBuilder_.getMessage()
           if pokedexEntry != nil {
              try! pokedexEntryBuilder_.mergeFrom(pokedexEntry)
           }
        }
        return pokedexEntryBuilder_
      }
      public func setPokedexEntry(value:Pogoprotos.Data.PokedexEntry!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokedexEntry = value
        return self
      }
      public func mergePokedexEntry(value:Pogoprotos.Data.PokedexEntry) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokedexEntry {
          builderResult.pokedexEntry = try Pogoprotos.Data.PokedexEntry.builderWithPrototype(builderResult.pokedexEntry).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokedexEntry = value
        }
        builderResult.hasPokedexEntry = true
        return self
      }
      public func clearPokedexEntry() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokedexEntryBuilder_ = nil
        builderResult.hasPokedexEntry = false
        builderResult.pokedexEntry = nil
        return self
      }
      public var hasPlayerStats:Bool {
           get {
               return builderResult.hasPlayerStats
           }
      }
      public var playerStats:Pogoprotos.Data.Player.PlayerStats! {
           get {
               if playerStatsBuilder_ != nil {
                  builderResult.playerStats = playerStatsBuilder_.getMessage()
               }
               return builderResult.playerStats
           }
           set (value) {
               builderResult.hasPlayerStats = true
               builderResult.playerStats = value
           }
      }
      private var playerStatsBuilder_:Pogoprotos.Data.Player.PlayerStats.Builder! {
           didSet {
              builderResult.hasPlayerStats = true
           }
      }
      public func getPlayerStatsBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
        if playerStatsBuilder_ == nil {
           playerStatsBuilder_ = Pogoprotos.Data.Player.PlayerStats.Builder()
           builderResult.playerStats = playerStatsBuilder_.getMessage()
           if playerStats != nil {
              try! playerStatsBuilder_.mergeFrom(playerStats)
           }
        }
        return playerStatsBuilder_
      }
      public func setPlayerStats(value:Pogoprotos.Data.Player.PlayerStats!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerStats = value
        return self
      }
      public func mergePlayerStats(value:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerStats {
          builderResult.playerStats = try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(builderResult.playerStats).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerStats = value
        }
        builderResult.hasPlayerStats = true
        return self
      }
      public func clearPlayerStats() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerStatsBuilder_ = nil
        builderResult.hasPlayerStats = false
        builderResult.playerStats = nil
        return self
      }
      public var hasPlayerCurrency:Bool {
           get {
               return builderResult.hasPlayerCurrency
           }
      }
      public var playerCurrency:Pogoprotos.Data.Player.PlayerCurrency! {
           get {
               if playerCurrencyBuilder_ != nil {
                  builderResult.playerCurrency = playerCurrencyBuilder_.getMessage()
               }
               return builderResult.playerCurrency
           }
           set (value) {
               builderResult.hasPlayerCurrency = true
               builderResult.playerCurrency = value
           }
      }
      private var playerCurrencyBuilder_:Pogoprotos.Data.Player.PlayerCurrency.Builder! {
           didSet {
              builderResult.hasPlayerCurrency = true
           }
      }
      public func getPlayerCurrencyBuilder() -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        if playerCurrencyBuilder_ == nil {
           playerCurrencyBuilder_ = Pogoprotos.Data.Player.PlayerCurrency.Builder()
           builderResult.playerCurrency = playerCurrencyBuilder_.getMessage()
           if playerCurrency != nil {
              try! playerCurrencyBuilder_.mergeFrom(playerCurrency)
           }
        }
        return playerCurrencyBuilder_
      }
      public func setPlayerCurrency(value:Pogoprotos.Data.Player.PlayerCurrency!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerCurrency = value
        return self
      }
      public func mergePlayerCurrency(value:Pogoprotos.Data.Player.PlayerCurrency) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerCurrency {
          builderResult.playerCurrency = try Pogoprotos.Data.Player.PlayerCurrency.builderWithPrototype(builderResult.playerCurrency).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerCurrency = value
        }
        builderResult.hasPlayerCurrency = true
        return self
      }
      public func clearPlayerCurrency() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerCurrencyBuilder_ = nil
        builderResult.hasPlayerCurrency = false
        builderResult.playerCurrency = nil
        return self
      }
      public var hasPlayerCamera:Bool {
           get {
               return builderResult.hasPlayerCamera
           }
      }
      public var playerCamera:Pogoprotos.Data.Player.PlayerCamera! {
           get {
               if playerCameraBuilder_ != nil {
                  builderResult.playerCamera = playerCameraBuilder_.getMessage()
               }
               return builderResult.playerCamera
           }
           set (value) {
               builderResult.hasPlayerCamera = true
               builderResult.playerCamera = value
           }
      }
      private var playerCameraBuilder_:Pogoprotos.Data.Player.PlayerCamera.Builder! {
           didSet {
              builderResult.hasPlayerCamera = true
           }
      }
      public func getPlayerCameraBuilder() -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        if playerCameraBuilder_ == nil {
           playerCameraBuilder_ = Pogoprotos.Data.Player.PlayerCamera.Builder()
           builderResult.playerCamera = playerCameraBuilder_.getMessage()
           if playerCamera != nil {
              try! playerCameraBuilder_.mergeFrom(playerCamera)
           }
        }
        return playerCameraBuilder_
      }
      public func setPlayerCamera(value:Pogoprotos.Data.Player.PlayerCamera!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerCamera = value
        return self
      }
      public func mergePlayerCamera(value:Pogoprotos.Data.Player.PlayerCamera) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerCamera {
          builderResult.playerCamera = try Pogoprotos.Data.Player.PlayerCamera.builderWithPrototype(builderResult.playerCamera).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerCamera = value
        }
        builderResult.hasPlayerCamera = true
        return self
      }
      public func clearPlayerCamera() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerCameraBuilder_ = nil
        builderResult.hasPlayerCamera = false
        builderResult.playerCamera = nil
        return self
      }
      public var hasInventoryUpgrades:Bool {
           get {
               return builderResult.hasInventoryUpgrades
           }
      }
      public var inventoryUpgrades:Pogoprotos.Inventory.InventoryUpgrades! {
           get {
               if inventoryUpgradesBuilder_ != nil {
                  builderResult.inventoryUpgrades = inventoryUpgradesBuilder_.getMessage()
               }
               return builderResult.inventoryUpgrades
           }
           set (value) {
               builderResult.hasInventoryUpgrades = true
               builderResult.inventoryUpgrades = value
           }
      }
      private var inventoryUpgradesBuilder_:Pogoprotos.Inventory.InventoryUpgrades.Builder! {
           didSet {
              builderResult.hasInventoryUpgrades = true
           }
      }
      public func getInventoryUpgradesBuilder() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        if inventoryUpgradesBuilder_ == nil {
           inventoryUpgradesBuilder_ = Pogoprotos.Inventory.InventoryUpgrades.Builder()
           builderResult.inventoryUpgrades = inventoryUpgradesBuilder_.getMessage()
           if inventoryUpgrades != nil {
              try! inventoryUpgradesBuilder_.mergeFrom(inventoryUpgrades)
           }
        }
        return inventoryUpgradesBuilder_
      }
      public func setInventoryUpgrades(value:Pogoprotos.Inventory.InventoryUpgrades!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.inventoryUpgrades = value
        return self
      }
      public func mergeInventoryUpgrades(value:Pogoprotos.Inventory.InventoryUpgrades) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasInventoryUpgrades {
          builderResult.inventoryUpgrades = try Pogoprotos.Inventory.InventoryUpgrades.builderWithPrototype(builderResult.inventoryUpgrades).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryUpgrades = value
        }
        builderResult.hasInventoryUpgrades = true
        return self
      }
      public func clearInventoryUpgrades() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        inventoryUpgradesBuilder_ = nil
        builderResult.hasInventoryUpgrades = false
        builderResult.inventoryUpgrades = nil
        return self
      }
      public var hasAppliedItems:Bool {
           get {
               return builderResult.hasAppliedItems
           }
      }
      public var appliedItems:Pogoprotos.Inventory.AppliedItems! {
           get {
               if appliedItemsBuilder_ != nil {
                  builderResult.appliedItems = appliedItemsBuilder_.getMessage()
               }
               return builderResult.appliedItems
           }
           set (value) {
               builderResult.hasAppliedItems = true
               builderResult.appliedItems = value
           }
      }
      private var appliedItemsBuilder_:Pogoprotos.Inventory.AppliedItems.Builder! {
           didSet {
              builderResult.hasAppliedItems = true
           }
      }
      public func getAppliedItemsBuilder() -> Pogoprotos.Inventory.AppliedItems.Builder {
        if appliedItemsBuilder_ == nil {
           appliedItemsBuilder_ = Pogoprotos.Inventory.AppliedItems.Builder()
           builderResult.appliedItems = appliedItemsBuilder_.getMessage()
           if appliedItems != nil {
              try! appliedItemsBuilder_.mergeFrom(appliedItems)
           }
        }
        return appliedItemsBuilder_
      }
      public func setAppliedItems(value:Pogoprotos.Inventory.AppliedItems!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.appliedItems = value
        return self
      }
      public func mergeAppliedItems(value:Pogoprotos.Inventory.AppliedItems) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasAppliedItems {
          builderResult.appliedItems = try Pogoprotos.Inventory.AppliedItems.builderWithPrototype(builderResult.appliedItems).mergeFrom(value).buildPartial()
        } else {
          builderResult.appliedItems = value
        }
        builderResult.hasAppliedItems = true
        return self
      }
      public func clearAppliedItems() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        appliedItemsBuilder_ = nil
        builderResult.hasAppliedItems = false
        builderResult.appliedItems = nil
        return self
      }
      public var hasEggIncubators:Bool {
           get {
               return builderResult.hasEggIncubators
           }
      }
      public var eggIncubators:Pogoprotos.Inventory.EggIncubators! {
           get {
               if eggIncubatorsBuilder_ != nil {
                  builderResult.eggIncubators = eggIncubatorsBuilder_.getMessage()
               }
               return builderResult.eggIncubators
           }
           set (value) {
               builderResult.hasEggIncubators = true
               builderResult.eggIncubators = value
           }
      }
      private var eggIncubatorsBuilder_:Pogoprotos.Inventory.EggIncubators.Builder! {
           didSet {
              builderResult.hasEggIncubators = true
           }
      }
      public func getEggIncubatorsBuilder() -> Pogoprotos.Inventory.EggIncubators.Builder {
        if eggIncubatorsBuilder_ == nil {
           eggIncubatorsBuilder_ = Pogoprotos.Inventory.EggIncubators.Builder()
           builderResult.eggIncubators = eggIncubatorsBuilder_.getMessage()
           if eggIncubators != nil {
              try! eggIncubatorsBuilder_.mergeFrom(eggIncubators)
           }
        }
        return eggIncubatorsBuilder_
      }
      public func setEggIncubators(value:Pogoprotos.Inventory.EggIncubators!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.eggIncubators = value
        return self
      }
      public func mergeEggIncubators(value:Pogoprotos.Inventory.EggIncubators) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasEggIncubators {
          builderResult.eggIncubators = try Pogoprotos.Inventory.EggIncubators.builderWithPrototype(builderResult.eggIncubators).mergeFrom(value).buildPartial()
        } else {
          builderResult.eggIncubators = value
        }
        builderResult.hasEggIncubators = true
        return self
      }
      public func clearEggIncubators() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        eggIncubatorsBuilder_ = nil
        builderResult.hasEggIncubators = false
        builderResult.eggIncubators = nil
        return self
      }
      public var hasPokemonFamily:Bool {
           get {
               return builderResult.hasPokemonFamily
           }
      }
      public var pokemonFamily:Pogoprotos.Inventory.PokemonFamily! {
           get {
               if pokemonFamilyBuilder_ != nil {
                  builderResult.pokemonFamily = pokemonFamilyBuilder_.getMessage()
               }
               return builderResult.pokemonFamily
           }
           set (value) {
               builderResult.hasPokemonFamily = true
               builderResult.pokemonFamily = value
           }
      }
      private var pokemonFamilyBuilder_:Pogoprotos.Inventory.PokemonFamily.Builder! {
           didSet {
              builderResult.hasPokemonFamily = true
           }
      }
      public func getPokemonFamilyBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
        if pokemonFamilyBuilder_ == nil {
           pokemonFamilyBuilder_ = Pogoprotos.Inventory.PokemonFamily.Builder()
           builderResult.pokemonFamily = pokemonFamilyBuilder_.getMessage()
           if pokemonFamily != nil {
              try! pokemonFamilyBuilder_.mergeFrom(pokemonFamily)
           }
        }
        return pokemonFamilyBuilder_
      }
      public func setPokemonFamily(value:Pogoprotos.Inventory.PokemonFamily!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokemonFamily = value
        return self
      }
      public func mergePokemonFamily(value:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokemonFamily {
          builderResult.pokemonFamily = try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(builderResult.pokemonFamily).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonFamily = value
        }
        builderResult.hasPokemonFamily = true
        return self
      }
      public func clearPokemonFamily() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokemonFamilyBuilder_ = nil
        builderResult.hasPokemonFamily = false
        builderResult.pokemonFamily = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        builderResult = Pogoprotos.Inventory.InventoryItemData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        return try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryItemData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryItemData {
        let returnMe:Pogoprotos.Inventory.InventoryItemData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if other == Pogoprotos.Inventory.InventoryItemData() {
         return self
        }
        if (other.hasPokemonData) {
            try mergePokemonData(other.pokemonData)
        }
        if (other.hasItem) {
            try mergeItem(other.item)
        }
        if (other.hasPokedexEntry) {
            try mergePokedexEntry(other.pokedexEntry)
        }
        if (other.hasPlayerStats) {
            try mergePlayerStats(other.playerStats)
        }
        if (other.hasPlayerCurrency) {
            try mergePlayerCurrency(other.playerCurrency)
        }
        if (other.hasPlayerCamera) {
            try mergePlayerCamera(other.playerCamera)
        }
        if (other.hasInventoryUpgrades) {
            try mergeInventoryUpgrades(other.inventoryUpgrades)
        }
        if (other.hasAppliedItems) {
            try mergeAppliedItems(other.appliedItems)
        }
        if (other.hasEggIncubators) {
            try mergeEggIncubators(other.eggIncubators)
        }
        if (other.hasPokemonFamily) {
            try mergePokemonFamily(other.pokemonFamily)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonData {
              try subBuilder.mergeFrom(pokemonData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonData = subBuilder.buildPartial()

          case 18:
            let subBuilder:Pogoprotos.Inventory.Item.Builder = Pogoprotos.Inventory.Item.Builder()
            if hasItem {
              try subBuilder.mergeFrom(item)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            item = subBuilder.buildPartial()

          case 26:
            let subBuilder:Pogoprotos.Data.PokedexEntry.Builder = Pogoprotos.Data.PokedexEntry.Builder()
            if hasPokedexEntry {
              try subBuilder.mergeFrom(pokedexEntry)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokedexEntry = subBuilder.buildPartial()

          case 34:
            let subBuilder:Pogoprotos.Data.Player.PlayerStats.Builder = Pogoprotos.Data.Player.PlayerStats.Builder()
            if hasPlayerStats {
              try subBuilder.mergeFrom(playerStats)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerStats = subBuilder.buildPartial()

          case 42:
            let subBuilder:Pogoprotos.Data.Player.PlayerCurrency.Builder = Pogoprotos.Data.Player.PlayerCurrency.Builder()
            if hasPlayerCurrency {
              try subBuilder.mergeFrom(playerCurrency)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerCurrency = subBuilder.buildPartial()

          case 50:
            let subBuilder:Pogoprotos.Data.Player.PlayerCamera.Builder = Pogoprotos.Data.Player.PlayerCamera.Builder()
            if hasPlayerCamera {
              try subBuilder.mergeFrom(playerCamera)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerCamera = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Inventory.InventoryUpgrades.Builder = Pogoprotos.Inventory.InventoryUpgrades.Builder()
            if hasInventoryUpgrades {
              try subBuilder.mergeFrom(inventoryUpgrades)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryUpgrades = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Inventory.AppliedItems.Builder = Pogoprotos.Inventory.AppliedItems.Builder()
            if hasAppliedItems {
              try subBuilder.mergeFrom(appliedItems)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            appliedItems = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Inventory.EggIncubators.Builder = Pogoprotos.Inventory.EggIncubators.Builder()
            if hasEggIncubators {
              try subBuilder.mergeFrom(eggIncubators)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            eggIncubators = subBuilder.buildPartial()

          case 82:
            let subBuilder:Pogoprotos.Inventory.PokemonFamily.Builder = Pogoprotos.Inventory.PokemonFamily.Builder()
            if hasPokemonFamily {
              try subBuilder.mergeFrom(pokemonFamily)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonFamily = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryItemData.Builder()
        if let jsonValuePokemonData = jsonMap["pokemonData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonData = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonValuePokemonData).build()

        }
        if let jsonValueItem = jsonMap["item"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.item = try Pogoprotos.Inventory.Item.Builder.decodeToBuilder(jsonValueItem).build()

        }
        if let jsonValuePokedexEntry = jsonMap["pokedexEntry"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokedexEntry = try Pogoprotos.Data.PokedexEntry.Builder.decodeToBuilder(jsonValuePokedexEntry).build()

        }
        if let jsonValuePlayerStats = jsonMap["playerStats"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerStats = try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsonValuePlayerStats).build()

        }
        if let jsonValuePlayerCurrency = jsonMap["playerCurrency"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerCurrency = try Pogoprotos.Data.Player.PlayerCurrency.Builder.decodeToBuilder(jsonValuePlayerCurrency).build()

        }
        if let jsonValuePlayerCamera = jsonMap["playerCamera"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerCamera = try Pogoprotos.Data.Player.PlayerCamera.Builder.decodeToBuilder(jsonValuePlayerCamera).build()

        }
        if let jsonValueInventoryUpgrades = jsonMap["inventoryUpgrades"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryUpgrades = try Pogoprotos.Inventory.InventoryUpgrades.Builder.decodeToBuilder(jsonValueInventoryUpgrades).build()

        }
        if let jsonValueAppliedItems = jsonMap["appliedItems"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.appliedItems = try Pogoprotos.Inventory.AppliedItems.Builder.decodeToBuilder(jsonValueAppliedItems).build()

        }
        if let jsonValueEggIncubators = jsonMap["eggIncubators"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.eggIncubators = try Pogoprotos.Inventory.EggIncubators.Builder.decodeToBuilder(jsonValueEggIncubators).build()

        }
        if let jsonValuePokemonFamily = jsonMap["pokemonFamily"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonFamily = try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsonValuePokemonFamily).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventoryUpgrade : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.ItemId = Pogoprotos.Inventory.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var upgradeType:Pogoprotos.Inventory.InventoryUpgradeType = Pogoprotos.Inventory.InventoryUpgradeType.UpgradeUnset
    public private(set) var hasUpgradeType:Bool = false
    public private(set) var hasAdditionalStorage:Bool = false
    public private(set) var additionalStorage:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasUpgradeType {
        try output.writeEnum(2, value:upgradeType.rawValue)
      }
      if hasAdditionalStorage {
        try output.writeInt32(3, value:additionalStorage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if (hasUpgradeType) {
        serialize_size += upgradeType.rawValue.computeEnumSize(2)
      }
      if hasAdditionalStorage {
        serialize_size += additionalStorage.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryUpgrade> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryUpgrade>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrade? {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
      return Pogoprotos.Inventory.InventoryUpgrade.classBuilder() as! Pogoprotos.Inventory.InventoryUpgrade.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryUpgrade.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryUpgrade.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryUpgrade.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
      return try Pogoprotos.Inventory.InventoryUpgrade.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryUpgrade) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasUpgradeType {
        jsonMap["upgradeType"] = upgradeType.toString()
      }
      if hasAdditionalStorage {
        jsonMap["additionalStorage"] = NSNumber(int:additionalStorage)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrade {
      return try Pogoprotos.Inventory.InventoryUpgrade.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if (hasUpgradeType) {
        output += "\(indent) upgradeType: \(upgradeType.description)\n"
      }
      if hasAdditionalStorage {
        output += "\(indent) additionalStorage: \(additionalStorage) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasUpgradeType {
               hashCode = (hashCode &* 31) &+ Int(upgradeType.rawValue)
            }
            if hasAdditionalStorage {
               hashCode = (hashCode &* 31) &+ additionalStorage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryUpgrade"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryUpgrade"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryUpgrade.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryUpgrade = Pogoprotos.Inventory.InventoryUpgrade()
      public func getMessage() -> Pogoprotos.Inventory.InventoryUpgrade {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.ItemId) -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
        public var hasUpgradeType:Bool{
            get {
                return builderResult.hasUpgradeType
            }
        }
        public var upgradeType:Pogoprotos.Inventory.InventoryUpgradeType {
            get {
                return builderResult.upgradeType
            }
            set (value) {
                builderResult.hasUpgradeType = true
                builderResult.upgradeType = value
            }
        }
        public func setUpgradeType(value:Pogoprotos.Inventory.InventoryUpgradeType) -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
          self.upgradeType = value
          return self
        }
        public func clearUpgradeType() -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
           builderResult.hasUpgradeType = false
           builderResult.upgradeType = .UpgradeUnset
           return self
        }
      public var hasAdditionalStorage:Bool {
           get {
                return builderResult.hasAdditionalStorage
           }
      }
      public var additionalStorage:Int32 {
           get {
                return builderResult.additionalStorage
           }
           set (value) {
               builderResult.hasAdditionalStorage = true
               builderResult.additionalStorage = value
           }
      }
      public func setAdditionalStorage(value:Int32) -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        self.additionalStorage = value
        return self
      }
      public func clearAdditionalStorage() -> Pogoprotos.Inventory.InventoryUpgrade.Builder{
           builderResult.hasAdditionalStorage = false
           builderResult.additionalStorage = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        builderResult = Pogoprotos.Inventory.InventoryUpgrade()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        return try Pogoprotos.Inventory.InventoryUpgrade.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryUpgrade {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryUpgrade {
        let returnMe:Pogoprotos.Inventory.InventoryUpgrade = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryUpgrade) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        if other == Pogoprotos.Inventory.InventoryUpgrade() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasUpgradeType {
             upgradeType = other.upgradeType
        }
        if other.hasAdditionalStorage {
             additionalStorage = other.additionalStorage
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            let valueIntupgradeType = try input.readEnum()
            if let enumsupgradeType = Pogoprotos.Inventory.InventoryUpgradeType(rawValue:valueIntupgradeType){
                 upgradeType = enumsupgradeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntupgradeType))
            }

          case 24:
            additionalStorage = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryUpgrade.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueUpgradeType = jsonMap["upgradeType"] as? String {
          resultDecodedBuilder.upgradeType = try Pogoprotos.Inventory.InventoryUpgradeType.fromString(jsonValueUpgradeType)
        }
        if let jsonValueAdditionalStorage = jsonMap["additionalStorage"] as? NSNumber {
          resultDecodedBuilder.additionalStorage = jsonValueAdditionalStorage.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrade.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryUpgrade.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventoryUpgrades : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var inventoryUpgrades:Array<Pogoprotos.Inventory.InventoryUpgrade>  = Array<Pogoprotos.Inventory.InventoryUpgrade>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementInventoryUpgrades in inventoryUpgrades {
          try output.writeMessage(1, value:oneElementInventoryUpgrades)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementInventoryUpgrades in inventoryUpgrades {
          serialize_size += oneElementInventoryUpgrades.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryUpgrades> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryUpgrades>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrades? {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
      return Pogoprotos.Inventory.InventoryUpgrades.classBuilder() as! Pogoprotos.Inventory.InventoryUpgrades.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryUpgrades.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryUpgrades.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryUpgrades.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
      return try Pogoprotos.Inventory.InventoryUpgrades.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryUpgrades) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !inventoryUpgrades.isEmpty {
        var jsonArrayInventoryUpgrades:Array<Dictionary<String,AnyObject>> = []
          for oneValueInventoryUpgrades in inventoryUpgrades {
            let ecodedMessageInventoryUpgrades = try oneValueInventoryUpgrades.encode()
            jsonArrayInventoryUpgrades += [ecodedMessageInventoryUpgrades]
          }
        jsonMap["inventoryUpgrades"] = jsonArrayInventoryUpgrades
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrades {
      return try Pogoprotos.Inventory.InventoryUpgrades.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var inventoryUpgradesElementIndex:Int = 0
      for oneElementInventoryUpgrades in inventoryUpgrades {
          output += "\(indent) inventoryUpgrades[\(inventoryUpgradesElementIndex)] {\n"
          output += try oneElementInventoryUpgrades.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          inventoryUpgradesElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementInventoryUpgrades in inventoryUpgrades {
                hashCode = (hashCode &* 31) &+ oneElementInventoryUpgrades.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryUpgrades"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryUpgrades"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryUpgrades.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryUpgrades = Pogoprotos.Inventory.InventoryUpgrades()
      public func getMessage() -> Pogoprotos.Inventory.InventoryUpgrades {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var inventoryUpgrades:Array<Pogoprotos.Inventory.InventoryUpgrade> {
           get {
               return builderResult.inventoryUpgrades
           }
           set (value) {
               builderResult.inventoryUpgrades = value
           }
      }
      public func setInventoryUpgrades(value:Array<Pogoprotos.Inventory.InventoryUpgrade>) -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        self.inventoryUpgrades = value
        return self
      }
      public func clearInventoryUpgrades() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        builderResult.inventoryUpgrades.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        builderResult = Pogoprotos.Inventory.InventoryUpgrades()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        return try Pogoprotos.Inventory.InventoryUpgrades.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryUpgrades {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryUpgrades {
        let returnMe:Pogoprotos.Inventory.InventoryUpgrades = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryUpgrades) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        if other == Pogoprotos.Inventory.InventoryUpgrades() {
         return self
        }
        if !other.inventoryUpgrades.isEmpty  {
           builderResult.inventoryUpgrades += other.inventoryUpgrades
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder = Pogoprotos.Inventory.InventoryUpgrade.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            inventoryUpgrades += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryUpgrades.Builder()
        if let jsonValueInventoryUpgrades = jsonMap["inventoryUpgrades"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayInventoryUpgrades:Array<Pogoprotos.Inventory.InventoryUpgrade> = []
          for oneValueInventoryUpgrades in jsonValueInventoryUpgrades {
            let messageFromStringInventoryUpgrades = try Pogoprotos.Inventory.InventoryUpgrade.Builder.decodeToBuilder(oneValueInventoryUpgrades).build()

            jsonArrayInventoryUpgrades += [messageFromStringInventoryUpgrades]
          }
          resultDecodedBuilder.inventoryUpgrades = jsonArrayInventoryUpgrades
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryUpgrades.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Item : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.ItemId = Pogoprotos.Inventory.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var hasCount:Bool = false
    public private(set) var count:Int32 = Int32(0)

    public private(set) var hasUnseen:Bool = false
    public private(set) var unseen:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasCount {
        try output.writeInt32(2, value:count)
      }
      if hasUnseen {
        try output.writeBool(3, value:unseen)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if hasCount {
        serialize_size += count.computeInt32Size(2)
      }
      if hasUnseen {
        serialize_size += unseen.computeBoolSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.Item> {
      var mergedArray = Array<Pogoprotos.Inventory.Item>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.Item? {
      return try Pogoprotos.Inventory.Item.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.Item.Builder {
      return Pogoprotos.Inventory.Item.classBuilder() as! Pogoprotos.Inventory.Item.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.Item.Builder {
      return classBuilder() as! Pogoprotos.Inventory.Item.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.Item.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.Item.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.Item.Builder {
      return try Pogoprotos.Inventory.Item.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.Item) throws -> Pogoprotos.Inventory.Item.Builder {
      return try Pogoprotos.Inventory.Item.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasCount {
        jsonMap["count"] = NSNumber(int:count)
      }
      if hasUnseen {
        jsonMap["unseen"] = unseen
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.Item {
      return try Pogoprotos.Inventory.Item.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if hasCount {
        output += "\(indent) count: \(count) \n"
      }
      if hasUnseen {
        output += "\(indent) unseen: \(unseen) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasCount {
               hashCode = (hashCode &* 31) &+ count.hashValue
            }
            if hasUnseen {
               hashCode = (hashCode &* 31) &+ unseen.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.Item"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.Item"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.Item.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.Item = Pogoprotos.Inventory.Item()
      public func getMessage() -> Pogoprotos.Inventory.Item {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.ItemId) -> Pogoprotos.Inventory.Item.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Inventory.Item.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
      public var hasCount:Bool {
           get {
                return builderResult.hasCount
           }
      }
      public var count:Int32 {
           get {
                return builderResult.count
           }
           set (value) {
               builderResult.hasCount = true
               builderResult.count = value
           }
      }
      public func setCount(value:Int32) -> Pogoprotos.Inventory.Item.Builder {
        self.count = value
        return self
      }
      public func clearCount() -> Pogoprotos.Inventory.Item.Builder{
           builderResult.hasCount = false
           builderResult.count = Int32(0)
           return self
      }
      public var hasUnseen:Bool {
           get {
                return builderResult.hasUnseen
           }
      }
      public var unseen:Bool {
           get {
                return builderResult.unseen
           }
           set (value) {
               builderResult.hasUnseen = true
               builderResult.unseen = value
           }
      }
      public func setUnseen(value:Bool) -> Pogoprotos.Inventory.Item.Builder {
        self.unseen = value
        return self
      }
      public func clearUnseen() -> Pogoprotos.Inventory.Item.Builder{
           builderResult.hasUnseen = false
           builderResult.unseen = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.Item.Builder {
        builderResult = Pogoprotos.Inventory.Item()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.Item.Builder {
        return try Pogoprotos.Inventory.Item.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.Item {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.Item {
        let returnMe:Pogoprotos.Inventory.Item = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.Item) throws -> Pogoprotos.Inventory.Item.Builder {
        if other == Pogoprotos.Inventory.Item() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasCount {
             count = other.count
        }
        if other.hasUnseen {
             unseen = other.unseen
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.Item.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.Item.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            count = try input.readInt32()

          case 24:
            unseen = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.Item.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.Item.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueCount = jsonMap["count"] as? NSNumber {
          resultDecodedBuilder.count = jsonValueCount.intValue
        }
        if let jsonValueUnseen = jsonMap["unseen"] as? Bool {
          resultDecodedBuilder.unseen = jsonValueUnseen
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.Item.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.Item.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class ItemAward : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.ItemId = Pogoprotos.Inventory.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var hasItemCount:Bool = false
    public private(set) var itemCount:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasItemCount {
        try output.writeInt32(2, value:itemCount)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if hasItemCount {
        serialize_size += itemCount.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.ItemAward> {
      var mergedArray = Array<Pogoprotos.Inventory.ItemAward>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.ItemAward? {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.ItemAward.Builder {
      return Pogoprotos.Inventory.ItemAward.classBuilder() as! Pogoprotos.Inventory.ItemAward.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.ItemAward.Builder {
      return classBuilder() as! Pogoprotos.Inventory.ItemAward.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.ItemAward.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.ItemAward.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.ItemAward.Builder {
      return try Pogoprotos.Inventory.ItemAward.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.ItemAward) throws -> Pogoprotos.Inventory.ItemAward.Builder {
      return try Pogoprotos.Inventory.ItemAward.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasItemCount {
        jsonMap["itemCount"] = NSNumber(int:itemCount)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.ItemAward {
      return try Pogoprotos.Inventory.ItemAward.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if hasItemCount {
        output += "\(indent) itemCount: \(itemCount) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasItemCount {
               hashCode = (hashCode &* 31) &+ itemCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.ItemAward"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.ItemAward"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.ItemAward.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.ItemAward = Pogoprotos.Inventory.ItemAward()
      public func getMessage() -> Pogoprotos.Inventory.ItemAward {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.ItemId) -> Pogoprotos.Inventory.ItemAward.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Inventory.ItemAward.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
      public var hasItemCount:Bool {
           get {
                return builderResult.hasItemCount
           }
      }
      public var itemCount:Int32 {
           get {
                return builderResult.itemCount
           }
           set (value) {
               builderResult.hasItemCount = true
               builderResult.itemCount = value
           }
      }
      public func setItemCount(value:Int32) -> Pogoprotos.Inventory.ItemAward.Builder {
        self.itemCount = value
        return self
      }
      public func clearItemCount() -> Pogoprotos.Inventory.ItemAward.Builder{
           builderResult.hasItemCount = false
           builderResult.itemCount = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.ItemAward.Builder {
        builderResult = Pogoprotos.Inventory.ItemAward()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.ItemAward.Builder {
        return try Pogoprotos.Inventory.ItemAward.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.ItemAward {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.ItemAward {
        let returnMe:Pogoprotos.Inventory.ItemAward = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.ItemAward) throws -> Pogoprotos.Inventory.ItemAward.Builder {
        if other == Pogoprotos.Inventory.ItemAward() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasItemCount {
             itemCount = other.itemCount
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.ItemAward.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.ItemAward.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            itemCount = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.ItemAward.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.ItemAward.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueItemCount = jsonMap["itemCount"] as? NSNumber {
          resultDecodedBuilder.itemCount = jsonValueItemCount.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.ItemAward.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.ItemAward.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PokemonFamily : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var familyId:Pogoprotos.Enums.PokemonFamilyId = Pogoprotos.Enums.PokemonFamilyId.FamilyUnset
    public private(set) var hasFamilyId:Bool = false
    public private(set) var hasCandy:Bool = false
    public private(set) var candy:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFamilyId {
        try output.writeEnum(1, value:familyId.rawValue)
      }
      if hasCandy {
        try output.writeInt32(2, value:candy)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasFamilyId) {
        serialize_size += familyId.rawValue.computeEnumSize(1)
      }
      if hasCandy {
        serialize_size += candy.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.PokemonFamily> {
      var mergedArray = Array<Pogoprotos.Inventory.PokemonFamily>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.PokemonFamily? {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PogoprotosInventoryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return Pogoprotos.Inventory.PokemonFamily.classBuilder() as! Pogoprotos.Inventory.PokemonFamily.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return classBuilder() as! Pogoprotos.Inventory.PokemonFamily.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.PokemonFamily.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.PokemonFamily.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFamilyId {
        jsonMap["familyId"] = familyId.toString()
      }
      if hasCandy {
        jsonMap["candy"] = NSNumber(int:candy)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasFamilyId) {
        output += "\(indent) familyId: \(familyId.description)\n"
      }
      if hasCandy {
        output += "\(indent) candy: \(candy) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFamilyId {
               hashCode = (hashCode &* 31) &+ Int(familyId.rawValue)
            }
            if hasCandy {
               hashCode = (hashCode &* 31) &+ candy.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.PokemonFamily"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.PokemonFamily"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.PokemonFamily.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.PokemonFamily = Pogoprotos.Inventory.PokemonFamily()
      public func getMessage() -> Pogoprotos.Inventory.PokemonFamily {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasFamilyId:Bool{
            get {
                return builderResult.hasFamilyId
            }
        }
        public var familyId:Pogoprotos.Enums.PokemonFamilyId {
            get {
                return builderResult.familyId
            }
            set (value) {
                builderResult.hasFamilyId = true
                builderResult.familyId = value
            }
        }
        public func setFamilyId(value:Pogoprotos.Enums.PokemonFamilyId) -> Pogoprotos.Inventory.PokemonFamily.Builder {
          self.familyId = value
          return self
        }
        public func clearFamilyId() -> Pogoprotos.Inventory.PokemonFamily.Builder {
           builderResult.hasFamilyId = false
           builderResult.familyId = .FamilyUnset
           return self
        }
      public var hasCandy:Bool {
           get {
                return builderResult.hasCandy
           }
      }
      public var candy:Int32 {
           get {
                return builderResult.candy
           }
           set (value) {
               builderResult.hasCandy = true
               builderResult.candy = value
           }
      }
      public func setCandy(value:Int32) -> Pogoprotos.Inventory.PokemonFamily.Builder {
        self.candy = value
        return self
      }
      public func clearCandy() -> Pogoprotos.Inventory.PokemonFamily.Builder{
           builderResult.hasCandy = false
           builderResult.candy = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.PokemonFamily.Builder {
        builderResult = Pogoprotos.Inventory.PokemonFamily()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        return try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.PokemonFamily {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.PokemonFamily {
        let returnMe:Pogoprotos.Inventory.PokemonFamily = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        if other == Pogoprotos.Inventory.PokemonFamily() {
         return self
        }
        if other.hasFamilyId {
             familyId = other.familyId
        }
        if other.hasCandy {
             candy = other.candy
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntfamilyId = try input.readEnum()
            if let enumsfamilyId = Pogoprotos.Enums.PokemonFamilyId(rawValue:valueIntfamilyId){
                 familyId = enumsfamilyId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntfamilyId))
            }

          case 16:
            candy = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.PokemonFamily.Builder()
        if let jsonValueFamilyId = jsonMap["familyId"] as? String {
          resultDecodedBuilder.familyId = try Pogoprotos.Enums.PokemonFamilyId.fromString(jsonValueFamilyId)
        }
        if let jsonValueCandy = jsonMap["candy"] as? NSNumber {
          resultDecodedBuilder.candy = jsonValueCandy.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
